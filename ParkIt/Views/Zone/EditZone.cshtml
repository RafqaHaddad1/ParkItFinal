

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
   

 
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Parking Lot Form</title>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <link rel="stylesheet" href="https://cdn.datatables.net/2.1.4/css/dataTables.dataTables.css" />
    <link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet" />
    <script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>
    <script src="https://cdn.datatables.net/2.1.4/js/dataTables.js"></script>
    <link rel="stylesheet" href="~/css/site.css">

    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <style>
        .container {
           /*  display: flex; */
            flex-direction: column;
            align-items: center;
            padding: 20px;
            max-width: 1500px; 
            margin: 0 auto;
        }

        .form-container {
            display: flex;
            flex-direction: row; /* Change to row direction */
            justify-content: space-between;
            width: 90%;
            background-color: #e0e0e0;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
            column-gap: 20px; /* Add space between columns */
        }

        .form-left, .form-right {
            display: flex;
            flex-direction: column;
            width: 48%;
        }

            .form-left input, .form-right input, .form-right textarea, .form-left select {
                margin-bottom: 10px;
                padding: 8px;
                border: 1px solid #ccc;
                border-radius: 5px;
            }

            .form-right textarea {
                height: 150px;
            }

            .form-left input[type="file"] {
                padding: 3px;
            }

        .save-button {
            margin-top: 20px;
            padding: 10px 20px;
            background-color: #F3BC12;
            margin-bottom: 20px;
            color: #23282B;
            border: none;
            border-radius: 5px;
            cursor: pointer;
        }

        .button-container {
            text-align: center;
        }

        /* Table Container Styles */
        .table-container {
            flex: 1;
            margin-right: 20px;
        }

            .table-container table {
                width: 100%;
                border-collapse: collapse;
                background-color: #e0e0e0;
                border-radius: 10px;
                overflow: hidden;
            }

            .table-container th, .table-container td {
                padding: 8px 20px;
                border: 1px solid #ccc;
                text-align: center;
                min-height: 40px;
            }

            .table-container th {
                background-color: #A9A9A9;
                color: #23282B;
            }

            .table-container tr:nth-child(even) {
                background-color: #ddd;
            }

            .table-container tr:nth-child(odd) {
                background-color: #ffffff;
            }

        /* Map Container Styles */
        .map-container {
            position: relative; /* This allows the #info div to be positioned within .map-container */
            width: 100%;
            height: 500px; /* Adjust as needed */
        }


            .map-container #myDiv {
                width: 100%;
                height: 500px;
            }

        /* Grid Container Styles */
        .grid-container {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 10px;
        }

        /* Add Button Styling */
        .add-button {
            margin-top: 20px;
            padding: 10px 20px;
            font-size: 16px;
            cursor: pointer;
            background-color: #F3BC12;
            color: #23282B;
            border: none;
            border-radius: 5px;
            transition: background-color 0.3s;
        }

        .btn-danger {
            background-color: #23282B;
            border-color: #23282B;
            color: #F3BC12
        }

        .form-control {
            display: block;
            width: 100%;
            height: 34px;
            padding: 6px 12px;
            font-size: 14px;
            line-height: 1.42857143;
            color: #555;
            background-color: #fff;
            background-image: none;
            border: 1px solid #ccc;
            border-radius: 4px;
            -webkit-box-shadow: inset 0 1px 1px rgba(0, 0, 0, .075);
            box-shadow: inset 0 1px 1px rgba(0, 0, 0, .075);
            -webkit-transition: border-color ease-in-out .15s, -webkit-box-shadow ease-in-out .15s;
            -o-transition: border-color ease-in-out .15s, box-shadow ease-in-out .15s;
            transition: border-color ease-in-out .15s, box-shadow ease-in-out .15s
        }

        .form-control {
            border-radius: 0;
            box-shadow: none;
            border-color: #d2d6de
        }

        .select2-hidden-accessible {
            border: 0 !important;
            clip: rect(0 0 0 0) !important;
            height: 1px !important;
            margin: -1px !important;
            overflow: hidden !important;
            padding: 0 !important;
            position: absolute !important;
            width: 1px !important
        }

        .select2-container--default .select2-selection--single,
        .select2-selection .select2-selection--single {
            border: 1px solid #d2d6de;
            border-radius: 5px;
            padding: 6px 12px;
            height: 34px
        }

        .select2-container--default .select2-selection--single {
            background-color: #fff;
            border: 1px solid #aaa;
            border-radius: 5px
        }

        .select2-container .select2-selection--single {
            box-sizing: border-box;
            cursor: pointer;
            display: block;
            height: 28px;
            user-select: none;
            -webkit-user-select: none
        }

            .select2-container .select2-selection--single .select2-selection__rendered {
                padding-right: 10px
            }

            .select2-container .select2-selection--single .select2-selection__rendered {
                padding-left: 0;
                padding-right: 0;
                height: auto;
                margin-top: -3px
            }

        .select2-container--default .select2-selection--single .select2-selection__rendered {
            line-height: 28px
        }

        .select2-container--default .select2-selection--single,
        .select2-selection .select2-selection--single {
            border: 1px solid #d2d6de;
            border-radius: 5px !important;
            padding: 6px 12px;
            height: 40px !important
        }

            .select2-container--default .select2-selection--single .select2-selection__arrow {
                height: 26px;
                position: absolute;
                top: 6px !important;
                right: 1px;
                width: 20px
            }

        .select2-container--default .select2-results__option {
            padding: 8px 12px;
            font-size: 14px;
            border-bottom: 1px solid #ddd;
            border-radius: 5px;
        }

        .select2-container--default .select2-results__option--highlighted {
            background-color: #F3BC12 !important;
            color: white !important;
        }
        /* Style the search box container */
        .select2-container--default .select2-search--dropdown .select2-search__field {
            padding: 8px;
            border: 1px solid #d2d6de;
            border-radius: 5px;
            box-sizing: border-box;
            font-size: 14px;
        }

            /* Style the search box input */
            .select2-container--default .select2-search--dropdown .select2-search__field:focus {
                border-color: #F3BC12;
                outline: none;
                box-shadow: 0 0 0 0.2rem rgba(38, 143, 255, 0.25);
                border-radius: 5px;
            }

        .select2-container--default .select2-dropdown {
            border: 1px solid #d2d6de;
            border-radius: 5px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            background-color: #fff;
            max-height: 200px; /* Adjust as needed */
            overflow-y: auto; /* Enable scrolling if options overflow */
        }

    </style>

    <link rel="stylesheet" href="~/css/site.css">

</head>
<body>

        <div class="container">
            <h1 class="Title">Edit Zone</h1>
        <form class="container" id="Zone-Form">
            <div class="form-container">
                <!-- Left Column: Zone Details -->
                <div class="form-left">
                    <label for="Zone_ID" class="control-label">Zone ID</label>
                    <input type="text" name="Zone_ID" placeholder="Zone_ID Name" id="Zone_ID" readonly />
                    <label for="Zone_Name" class="control-label">Zone Name</label>
                    <input type="text" name="Zone_Name" placeholder="Zone Name" id="Zone_Name" readonly />
                    <label for="Area" class="control-label"> Area </label>
                    <select name="Area" id="Area" class="Area form-control select2-hidden-accessible" data-placeholder="Select an Area" style="width: 100%;" tabindex="-1" aria-hidden="true" onchange="updateAreaId()">
                        <option value="" selected disabled>Select an Area</option>
                    </select>

                    <input type="text" name="AreaID" placeholder="Area" id="AreaID" hidden />

                    <label for="supervisor" class="control-label"> Supervisor </label>

                    <select name="supervisor" id="supervisor" class="supervisor form-control select2-hidden-accessible" data-placeholder="Select a Supervisor" style="width: 100%;" tabindex="-1" aria-hidden="true" onchange="updateSupervisorID()">
                        <option value="" selected disabled>Select a Supervisor</option>
                    </select>

                    <input type="number" id="Supervisor_ID" name="Supervisor_ID" hidden />

                    <label>
                        <input type="checkbox" name="Active" value="true" id="active-checkbox">
                        Active
                    </label>

                    @*   <button type="button" id="add-subzone-button" class="add-button" onclick="$('#AddSubzoneModal').modal('show')">Add Subzone</button> *@

                    <input type="text" id="coordinates-data" name="AllCoordinates" readonly/>


                </div>

                <!-- Right Column: Subzones and Map -->
                <div class="form-right">
                    <!-- Map Container -->
                    <div class="map-container">
                        <div id="myDiv"></div>
                    </div>
                </div>
            </div>
            <div id="info" style="position:absolute; color: red; font-family: Arial, Helvetica, sans-serif; height: 200px; font-size: 12px"></div>
            <!-- Submit Button -->
            <div class="button-container">
                <input type="submit" class="save-button" value="Save">
            </div>
        </form>
        </div>

    <div class="modal fade" id="addEventModal" tabindex="-1" aria-labelledby="addEventModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title" id="addEventModalLabel">Add Area</h4>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" id="closeAddModal" onclick=" $('#addEventModal').modal('hide');"></button>
                </div>
                <div class="modal-body">
                    <form id="AddAreaForm">
                        <label for="Name" class="control-label"> Area Name</label>
                        <br />
                        <input type="text" id="AreaName" name="Name" class="form-control" required />
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" id="submitButton" class="btn btn-primary" style="background-color: #F3BC12; color:#23282B">Add</button>
                </div>
            </div>
        </div>
    </div>
    <!-- Edit Subzone Modal-->
    <div class="modal fade" id="addEventModal" tabindex="-1" aria-labelledby="addEventModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title" id="addEventModalLabel">Edit Subzone</h4>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" id="closeAddModal" onclick=" $('#addEventModal').modal('hide');"></button>
                </div>
                <div class="modal-body">
                    <form id="addEventForm">
                        <div class="form-row">
                            <div class="form-group col-md-6">
                                <label for="Subzone_ID" class="control-label">Subzone ID</label>
                                <input id="Subzone_ID1" name="Subzone_ID" type="text" class="form-control" readonly />
                            </div>
                        </div>
                        <div class="form-row">
                            <div class="form-group col-md-6">
                                <label for="Zone_ID" class="control-label">Zone ID</label>
                                <input id="Zone_ID1" name="Zone_ID" type="text" class="form-control" readonly />
                            </div>
                        </div>
                        <div class="form-row">
                            <div class="form-group col-md-6">
                                <label for="Subzone_Name" class="control-label">Subzone Name</label>
                                <input id="Subzone_Name1" name="Subzone_Name" type="text" class="form-control"  />
                            </div>
                        </div>
                        <div class="form-row">
                            <div class="form-group col-md-6">
                                <label for="Capacity" class="control-label">Capacity</label>
                                <input id="Capacity1" name="Capacity" type="text" class="form-control"  />
                            </div>
                         </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" id="submitButton" class="btn btn-primary" style="background-color: #F3BC12; color:#23282B">Update</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Google Maps API -->
    <script async defer type="text/javascript" src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBiyENFIL4UsKCGGbXh3-nASJIMeJmpmYU&libraries=drawing"></script>

    <script type="text/javascript">
        function DisplayGoogleMap(coordinates) {
            InitMap(coordinates);
        }

        let map;
        let polygon;

        function InitMap(coordinates) {
            const location = new google.maps.LatLng(33.888630, 35.495480); // Default center
            const mapOptions = {
                zoom: 15,
                center: location,
                mapTypeId: google.maps.MapTypeId.ROADMAP
            };
            map = new google.maps.Map(document.getElementById('myDiv'), mapOptions);
            console.log('Map initialized with center:', location.toString());

            // Check if coordinates are provided
            if (coordinates && coordinates.length > 0) {
                // The coordinates from the response are nested; flatten them for Google Maps
                const flattenedCoords = coordinates[0].map(coord => ({
                    lat: coord[1],  // Latitude
                    lng: coord[0]   // Longitude
                }));

                // Create the polygon with the parsed path
                createPolygon(flattenedCoords);

                // Fit the map to the polygon bounds
                const bounds = new google.maps.LatLngBounds();
                polygon.getPath().forEach(latlng => bounds.extend(latlng));
                map.fitBounds(bounds); // Adjust the map to fit the polygon bounds
                console.log('Map zoomed to polygon bounds.');

                // Attach event listeners for editing
                attachPolygonListeners();
            } else {
                console.warn('No coordinates provided. Please input valid coordinates.');
            }

            // Initialize Drawing Manager
            const drawingManager = new google.maps.drawing.DrawingManager({
                drawingControlOptions: {
                    position: google.maps.ControlPosition.TOP_CENTER,
                    drawingModes: [
                        google.maps.drawing.OverlayType.POLYGON,
                    ]
                },
                polygonOptions: {
                    clickable: true,
                    draggable: false,
                    editable: true,
                    fillColor: "#FF0000",
                    fillOpacity: 0.5
                }
            });

            drawingManager.setMap(map);
            console.log('DrawingManager initialized and set on map.');

            // Handle completed polygon drawing
            google.maps.event.addListener(drawingManager, 'polygoncomplete', function (newPolygon) {
                console.log('New polygon completed:', newPolygon);
                if (polygon) {
                    polygon.setMap(null); // Remove the old polygon if it exists
                    console.log('Removed previous polygon from map.');
                }
                polygon = newPolygon;
                console.log('New polygon set on map.');

                attachPolygonListeners();
                updateCoordinates();
            });

            function createPolygon(path) {
                polygon = new google.maps.Polygon({
                    paths: path,
                    strokeColor: '#FF0000',
                    strokeOpacity: 0.8,
                    strokeWeight: 2,
                    fillColor: '#FF0000',
                    fillOpacity: 0.35,
                    editable: true,
                    draggable: true
                });
                polygon.setMap(map);
                console.log('Polygon created with paths:', path);
            }

            function attachPolygonListeners() {
                google.maps.event.addListener(polygon.getPath(), 'set_at', updateCoordinates);
                google.maps.event.addListener(polygon.getPath(), 'insert_at', updateCoordinates);
                google.maps.event.addListener(polygon.getPath(), 'remove_at', updateCoordinates);
            }

            function updateCoordinates() {
                const coordinatesInput = document.getElementById('coordinates-data');
                const coordsArray = [];
                const path = polygon.getPath();

                // Create nested coordinate pairs
                path.forEach(function (latlng) {
                    coordsArray.push([latlng.lng(), latlng.lat()]); // Store as [lng, lat]
                });

                // Wrap the array in another array to match the desired format
                const nestedCoordinates = [coordsArray];

                coordinatesInput.value = JSON.stringify(nestedCoordinates);
              
            }

        }


        var accessToken = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbiI6ImV5SmhiR2NpT2lKSVV6STFOaUlzSW5SNWNDSTZJa3BYVkNKOS5leUpmYVdRaU9pSTJObVppWkRRd01EZGtPRFkyTXpFMk5ERXpZVGRsWlRBaUxDSjFjMlZ5Ym1GdFpTSTZJbTV2ZG1FMElpd2ljR0Z6YzNkdmNtUWlPaUlrTW1Fa01UQWtNbGN2WWtVMFlsaFFTakpKTDAxM1NuTnpZVEpaZFRScVkwZG9lbmMxY0cxT1ZtRXZRMnRJZEZaYVlUUlFValZhUXpOUmFrY2lMQ0p5YjJ4bGN5STZXMTBzSW1selFXTjBhWFpsSWpwMGNuVmxMQ0psWkdsMGIzSWlPbTUxYkd3c0ltTnlaV0YwWldSQmRDSTZJakl3TWpRdE1UQXRNREZVTVRBNk5UQTZOREF1T0RnMVdpSXNJblZ3WkdGMFpXUkJkQ0k2SWpJd01qUXRNVEF0TURGVU1UQTZOVEE2TkRBdU9EZzFXaUlzSWw5ZmRpSTZNQ3dpYVdRaU9pSTJObVppWkRRd01EZGtPRFkyTXpFMk5ERXpZVGRsWlRBaUxDSnBZWFFpT2pFM01qZzVPRFl5TVRZc0ltVjRjQ0k2TVRjek1UVTNPREl4Tm4wLnVQNDNMOUo0TWcxcDdLMVJEUkUzYUlyamdVMWNBaF8wckJsQWlkaW9DQU0iLCJpYXQiOjE3Mjg5ODYyMTYsImV4cCI6MTczMTU3ODIxNn0.72WF3Pa8Gg-fF6BOo0x5JVGtr36HQextkDURYB3UYPE"



        $('.Area').select2();
        $('.supervisor').select2();
        // Call DisplayGoogleMap on page load
        window.onload = function () {
            
            const zoneData = sessionStorage.getItem("ZoneData");
            console.log("Zone ID form session storage ", zoneData);
            fetchZoneInfo(zoneData);
           
        };
    
        function fetchZoneInfo(zoneId) {

            $.ajax({
                url: "https://api.parkit.nova4lb.com/admin/zones/" + zoneId,
                type: 'GET',
                headers: {
                    'Authorization': 'Bearer ' + accessToken
                },
                success: function (response) {
                    if (response) {
                        console.log(response);
                        $("#Zone_ID").val(zoneId)
                        $("#Zone_Name").val(response.name);
                        $("#AreaID").val(response.area._id);
                        // Directly use the coordinates from the response
                        var coordinates = response.location.coordinates;

                        // Optionally, log the coordinates for debugging
                        console.log('Coordinates:', coordinates);

                        // If you want to display them in the input field as a string, convert them
                        $("#coordinates-data").val(JSON.stringify(coordinates));
                        DisplayGoogleMap(coordinates);
                        setArea();
                        setSupervisors();
                    } else {
                        alert('Error fetching zone details');
                    }
                },
                error: function (err) {
                    console.error(err);
                    alert('Error fetching zone details');
                }
            });
        }

        function setArea() {
            var accessToken = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbiI6ImV5SmhiR2NpT2lKSVV6STFOaUlzSW5SNWNDSTZJa3BYVkNKOS5leUpmYVdRaU9pSTJObVppWkRRd01EZGtPRFkyTXpFMk5ERXpZVGRsWlRBaUxDSjFjMlZ5Ym1GdFpTSTZJbTV2ZG1FMElpd2ljR0Z6YzNkdmNtUWlPaUlrTW1Fa01UQWtNbGN2WWtVMFlsaFFTakpKTDAxM1NuTnpZVEpaZFRScVkwZG9lbmMxY0cxT1ZtRXZRMnRJZEZaYVlUUlFValZhUXpOUmFrY2lMQ0p5YjJ4bGN5STZXMTBzSW1selFXTjBhWFpsSWpwMGNuVmxMQ0psWkdsMGIzSWlPbTUxYkd3c0ltTnlaV0YwWldSQmRDSTZJakl3TWpRdE1UQXRNREZVTVRBNk5UQTZOREF1T0RnMVdpSXNJblZ3WkdGMFpXUkJkQ0k2SWpJd01qUXRNVEF0TURGVU1UQTZOVEE2TkRBdU9EZzFXaUlzSWw5ZmRpSTZNQ3dpYVdRaU9pSTJObVppWkRRd01EZGtPRFkyTXpFMk5ERXpZVGRsWlRBaUxDSnBZWFFpT2pFM01qZzVPRFl5TVRZc0ltVjRjQ0k2TVRjek1UVTNPREl4Tm4wLnVQNDNMOUo0TWcxcDdLMVJEUkUzYUlyamdVMWNBaF8wckJsQWlkaW9DQU0iLCJpYXQiOjE3Mjg5ODYyMTYsImV4cCI6MTczMTU3ODIxNn0.72WF3Pa8Gg-fF6BOo0x5JVGtr36HQextkDURYB3UYPE"

            $.ajax({
                url: "https://api.parkit.nova4lb.com/admin/areas",
                type: 'GET',
                headers: {
                    'Authorization': 'Bearer ' + accessToken,
                },
                success: function (response) {
                    console.log("AJAX call succeeded, response:", response); // Log the response

                    var AreaDropdown = document.getElementById("Area");
                    AreaDropdown.innerHTML = ""; // Clear existing options

                    // Add a default "Select a Supervisor" option
                    var defaultOption = document.createElement("option");
                    defaultOption.value = "";
                    defaultOption.text = "Select an Area";
                    defaultOption.disabled = true;
                    defaultOption.selected = true;
                    AreaDropdown.appendChild(defaultOption);


                    var addOption = document.createElement("option");
                    addOption.value = "add-new";  // Unique value for identifying
                    addOption.text = "Add New Area";  // Display text
                    AreaDropdown.appendChild(addOption);

                    AreaDropdown.addEventListener('change', function () {
                        console.log("Dropdown changed: ", this.value); // Debug log
                        if (this.value === "add-new") {
                            console.log("Add New Area option selected"); // Debug log
                            $('#addEventModal').modal('show'); // Show the modal
                        }
                    });
                    // Populate the supervisor dropdown with the new options
                    response.forEach(function (area) {
                        console.log("Adding Area:", area); // Log each supervisor
                        var option = document.createElement("option");
                        option.value = area._id;
                        option.text = area.name;
                        option.setAttribute("data-area-id", area._id);
                        AreaDropdown.appendChild(option);
                    });
                    const areaId = $("#AreaID").val();
                    console.log("Selected Area ID: " + areaId);

                    if (areaId) {
                        // Find the dropdown element (ensure the correct dropdown ID is used)
                        const AreaDropdown = document.getElementById("Area");

                        if (AreaDropdown) {
                            // Find the matching option in the dropdown
                            const optionToSelect = Array.from(AreaDropdown.options).find(option => option.value == areaId);

                            if (optionToSelect) {
                                // Select the matched option
                                optionToSelect.selected = true;
                            } else {
                                console.warn("Option with the value " + areaId + " not found in the dropdown.");
                            }
                        } else {
                            console.error("Dropdown with ID 'AreaDropdown' not found.");
                        }
                    }

                },
                error: function (xhr, status, error) {
                    console.log('Error:', error); // Log any error
                    alert('Error: ' + error);
                }
            });
        }

        function updateAreaId() {
            // Get the selected option
            var selectedOption = document.getElementById("Area").selectedOptions[0];
            if (selectedOption.value == "add-new") {
                console.log("Add New Area option selected"); // Debug log
                $('#addEventModal').modal('show');
            }
            // Get the Subzone_ID from the data attribute
            var areaId = selectedOption.getAttribute("data-area-id"); // Use correct attribute for subzone
            // Set the Subzone_ID input field value
            document.getElementById("AreaID").value = areaId;
        }

        $("#submitButton").on("click", function () {
            var name = $("#AreaName").val();

            $.ajax({
                type: "POST",
                url: "https://api.parkit.nova4lb.com/admin/areas",
                headers: {
                    'Authorization': 'Bearer ' + accessToken,
                    'Content-Type': 'application/json'
                },
                data: JSON.stringify({
                    name: name
                }), // Ensure this object is closed correctly
                success: function (response) {
                    if (response) {
                        alert("Area added successfully");
                        $('#addEventModal').modal('hide'); // Close the modal after success
                        setArea(); // Call setArea() to refresh the dropdown or perform other actions
                    } else {
                        // Show error message
                        alert(response.message || "Failed to add Area");
                    }
                },
                error: function (xhr, status, error) {
                    alert("An error occurred: " + error);
                }
            });
        });
        function setSupervisors() {
            $.ajax({
                url: '/User/GetSupervisor',
                type: 'GET',
                success: function (response) {
                    console.log("AJAX call succeeded, response:", response); // Log the response

                    var supervisorDropdown = document.getElementById("supervisor");
                    supervisorDropdown.innerHTML = ""; // Clear existing options

                    // Add a default "Select a Supervisor" option
                    var defaultOption = document.createElement("option");
                    defaultOption.value = "";
                    defaultOption.text = "Select a Supervisor";
                    defaultOption.disabled = true;
                    defaultOption.selected = true;
                    supervisorDropdown.appendChild(defaultOption);

                    // Check if the response is an array
                    if (Array.isArray(response)) {
                        response.forEach(function (supervisor) {
                            console.log("Adding supervisor:", supervisor); // Log each supervisor
                            var option = document.createElement("option");
                            option.value = supervisor.supervisor_ID;
                            option.text = supervisor.supervisor_Name;
                            option.setAttribute("data-supervisor-id", supervisor.supervisor_ID);
                            supervisorDropdown.appendChild(option);
                        });

                        // Set the selected option if Supervisor_ID is available
                        const supervisorId = $("#Supervisor_ID").val();
                        console.log("Supervisor Id selected " + $("#Supervisor_ID").val());
                        if (supervisorId) {
                            // Ensure the option exists before setting it as selected
                            const optionToSelect = Array.from(supervisorDropdown.options).find(option => option.value == supervisorId);
                            if (optionToSelect) {
                                optionToSelect.selected = true;
                            }
                        }
                    } else {
                        console.error('Response is not an array:', response);
                        alert('No supervisors available.');
                    }
                },
                error: function (xhr, status, error) {
                    console.log('Error:', error); // Log any error
                    alert('Error: ' + error);
                }
            });
        }
        function updateSupervisorID() {
            // Get the selected option
            var selectedOption = document.getElementById("supervisor").selectedOptions[0];
            // Get the Subzone_ID from the data attribute
            var supervisorId = selectedOption.getAttribute("data-supervisor-id"); // Use correct attribute for subzone
            // Set the Subzone_ID input field value
            document.getElementById("Supervisor_ID").value = supervisorId;
        }

        $("#Zone-Form").submit(function (event) {
            event.preventDefault();
            var zoneId = $("#Zone_ID").val();
            var coordinatesData = $("#coordinates-data").val();

            // Parse the coordinates input
            var coordinatesArray = coordinatesData.split('],[').map(function (coord) {
                return coord.replace(/[\[\]]/g, '').split(',').map(Number);
            });

            // Wrap coordinatesArray into the required format
            var finalCoordinates = [coordinatesArray]; // Add an outer array for the coordinates

            // Log the final coordinates structure
            console.log(JSON.stringify({
                location: {
                    coordinates: finalCoordinates // Send the properly nested array
                }
            }));

            $.ajax({
                type: "PATCH",
                url: "https://api.parkit.nova4lb.com/admin/zones/" + zoneId,
                headers: {
                    'Authorization': 'Bearer ' + accessToken,
                    'Content-Type': 'application/json'
                },
                data: JSON.stringify({
                    location: {
                        coordinates: finalCoordinates // Send the properly nested array
                    }
                }),
                success: function (response) {
                    if (response) {
                        alert("Zone updated successfully");
                        window.location.href = "/Views/Zones";
                    } else {
                        // Show error message
                        alert(response.message || "Failed to update Zone");
                    }
                },
                error: function (xhr, status, error) {
                    alert("An error occurred: " + error);
                }
            });
        });


    </script>
</body>
</html>
