

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Parking Lot Form</title>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <link rel="stylesheet" href="https://cdn.datatables.net/2.1.4/css/dataTables.dataTables.css" />
    <link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet" />
    <script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>
    <script src="https://cdn.datatables.net/2.1.4/js/dataTables.js"></script>
    <link rel="stylesheet" href="~/css/site.css">

    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <style>
        .container {
           /*  display: flex; */
            flex-direction: column;
            align-items: center;
            padding: 20px;
            max-width: 1500px; 
            margin: 0 auto;
        }

        .form-container {
            display: flex;
            flex-direction: row; /* Change to row direction */
            justify-content: space-between;
            width: 90%;
            background-color: #e0e0e0;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
            column-gap: 20px; /* Add space between columns */
        }

        .form-left, .form-right {
            display: flex;
            flex-direction: column;
            width: 48%;
        }

            .form-left input, .form-right input, .form-right textarea, .form-left select {
                margin-bottom: 10px;
                padding: 8px;
                border: 1px solid #ccc;
                border-radius: 5px;
            }

            .form-right textarea {
                height: 150px;
            }

            .form-left input[type="file"] {
                padding: 3px;
            }

        .save-button {
            margin-top: 20px;
            padding: 10px 20px;
            background-color: #F3BC12;
            margin-bottom: 20px;
            color: #23282B;
            border: none;
            border-radius: 5px;
            cursor: pointer;
        }

        .button-container {
            text-align: center;
        }

        /* Table Container Styles */
        .table-container {
            flex: 1;
            margin-right: 20px;
        }

            .table-container table {
                width: 100%;
                border-collapse: collapse;
                background-color: #e0e0e0;
                border-radius: 10px;
                overflow: hidden;
            }

            .table-container th, .table-container td {
                padding: 8px 20px;
                border: 1px solid #ccc;
                text-align: center;
                min-height: 40px;
            }

            .table-container th {
                background-color: #A9A9A9;
                color: #23282B;
            }

            .table-container tr:nth-child(even) {
                background-color: #ddd;
            }

            .table-container tr:nth-child(odd) {
                background-color: #ffffff;
            }

        /* Map Container Styles */
        .map-container {
            position: relative; /* This allows the #info div to be positioned within .map-container */
            width: 100%;
            height: 500px; /* Adjust as needed */
        }


            .map-container #myDiv {
                width: 100%;
                height: 500px;
            }

        /* Grid Container Styles */
        .grid-container {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 10px;
        }

        /* Add Button Styling */
        .add-button {
            margin-top: 20px;
            padding: 10px 20px;
            font-size: 16px;
            cursor: pointer;
            background-color: #F3BC12;
            color: #23282B;
            border: none;
            border-radius: 5px;
            transition: background-color 0.3s;
        }

        .btn-danger {
            background-color: #23282B;
            border-color: #23282B;
            color: #F3BC12
        }

        .form-control {
            display: block;
            width: 100%;
            height: 34px;
            padding: 6px 12px;
            font-size: 14px;
            line-height: 1.42857143;
            color: #555;
            background-color: #fff;
            background-image: none;
            border: 1px solid #ccc;
            border-radius: 4px;
            -webkit-box-shadow: inset 0 1px 1px rgba(0, 0, 0, .075);
            box-shadow: inset 0 1px 1px rgba(0, 0, 0, .075);
            -webkit-transition: border-color ease-in-out .15s, -webkit-box-shadow ease-in-out .15s;
            -o-transition: border-color ease-in-out .15s, box-shadow ease-in-out .15s;
            transition: border-color ease-in-out .15s, box-shadow ease-in-out .15s
        }

        .form-control {
            border-radius: 0;
            box-shadow: none;
            border-color: #d2d6de
        }

        .select2-hidden-accessible {
            border: 0 !important;
            clip: rect(0 0 0 0) !important;
            height: 1px !important;
            margin: -1px !important;
            overflow: hidden !important;
            padding: 0 !important;
            position: absolute !important;
            width: 1px !important
        }

        .select2-container--default .select2-selection--single,
        .select2-selection .select2-selection--single {
            border: 1px solid #d2d6de;
            border-radius: 5px;
            padding: 6px 12px;
            height: 34px
        }

        .select2-container--default .select2-selection--single {
            background-color: #fff;
            border: 1px solid #aaa;
            border-radius: 5px
        }

        .select2-container .select2-selection--single {
            box-sizing: border-box;
            cursor: pointer;
            display: block;
            height: 28px;
            user-select: none;
            -webkit-user-select: none
        }

            .select2-container .select2-selection--single .select2-selection__rendered {
                padding-right: 10px
            }

            .select2-container .select2-selection--single .select2-selection__rendered {
                padding-left: 0;
                padding-right: 0;
                height: auto;
                margin-top: -3px
            }

        .select2-container--default .select2-selection--single .select2-selection__rendered {
            line-height: 28px
        }

        .select2-container--default .select2-selection--single,
        .select2-selection .select2-selection--single {
            border: 1px solid #d2d6de;
            border-radius: 5px !important;
            padding: 6px 12px;
            height: 40px !important
        }

            .select2-container--default .select2-selection--single .select2-selection__arrow {
                height: 26px;
                position: absolute;
                top: 6px !important;
                right: 1px;
                width: 20px
            }

        .select2-container--default .select2-results__option {
            padding: 8px 12px;
            font-size: 14px;
            border-bottom: 1px solid #ddd;
            border-radius: 5px;
        }

        .select2-container--default .select2-results__option--highlighted {
            background-color: #F3BC12 !important;
            color: white !important;
        }
        /* Style the search box container */
        .select2-container--default .select2-search--dropdown .select2-search__field {
            padding: 8px;
            border: 1px solid #d2d6de;
            border-radius: 5px;
            box-sizing: border-box;
            font-size: 14px;
        }

            /* Style the search box input */
            .select2-container--default .select2-search--dropdown .select2-search__field:focus {
                border-color: #F3BC12;
                outline: none;
                box-shadow: 0 0 0 0.2rem rgba(38, 143, 255, 0.25);
                border-radius: 5px;
            }

        .select2-container--default .select2-dropdown {
            border: 1px solid #d2d6de;
            border-radius: 5px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            background-color: #fff;
            max-height: 200px; /* Adjust as needed */
            overflow-y: auto; /* Enable scrolling if options overflow */
        }

    </style>

    <link rel="stylesheet" href="~/css/site.css">

</head>
<body>

        <div class="container">
            <h1 class="Title">Edit Zone</h1>

            @using (Html.BeginForm("SavePostEdit", "Zone", FormMethod.Post, new { enctype = "multipart/form-data", id = "Zone-Form" }))
            {
                <div class="form-container">
                    <!-- Left Column: Zone Details -->
                    <div class="form-left">
                        <input type="number" id="Zone_ID" name="Zone_ID" readonly />
                        <input type="text" name="Zone_Name" placeholder="Zone Name" required />
                        <input type="text" name="Area" placeholder="Area" required />
                        <input type="text" name="Street" placeholder="Street" required />

                    <select name="supervisor" id="supervisor" class="supervisor form-control select2-hidden-accessible" data-placeholder="Select a Supervisor" style="width: 100%;" tabindex="-1" aria-hidden="true" onchange="updateSupervisorID()">
                            <option value="" selected disabled>Select a Supervisor</option>
                        </select>

                        <input type="number" id="Supervisor_ID" name="Supervisor_ID" readonly />

                        <label>
                            <input type="checkbox" name="Active" value="true" id="active-checkbox">
                            Active
                        </label>
                    
                        <h2>Add Subzones</h2>
                        <input type="text" id="subzone-name" name="Subzone_Name" placeholder="Subzone Name" />
                        <input type="number" id="subzone-capacity" name="Capacity" placeholder="Capacity" />
                        <button type="button" id="add-subzone-button" class="add-button">+ Add Subzone</button>
                        <br/>
                        <!-- Table to show added subzones -->
                        <table id="subzone-table">
                            <thead>
                                <tr>
                                    <th>Subzone</th>
                                    <th>Capacity</th>
                                    <th>Action</th>
                                </tr>
                            </thead>
                            <tbody>
                                <!-- Rows for subzones will be dynamically added here -->
                            </tbody>
                        </table>

                        <!-- Hidden fields for coordinates and subzone data -->
                        <input type="text" id="coordinates-data" name="AllCoordinates" readonly />
                        <input type="hidden" id="subzones-data" name="subzonesData" />
                    </div>

                    <!-- Right Column: Map Container -->
                    <div class="form-right">
                        <div class="map-container">
                            <div id="myDiv" style="height: 500px; width: 100%;"></div>
                        </div>
                    </div>
                </div>

                <!-- Submit Button -->
                <div class="button-container">
                    <input type="submit" class="save-button" value="Save" />
                </div>
            }
        </div>
  

    <!-- Edit Subzone Modal-->
    <div class="modal fade" id="addEventModal" tabindex="-1" aria-labelledby="addEventModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title" id="addEventModalLabel">Edit Subzone</h4>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" id="closeAddModal" onclick=" $('#addEventModal').modal('hide');"></button>
                </div>
                <div class="modal-body">
                    <form id="addEventForm">
                        <div class="form-row">
                            <div class="form-group col-md-6">
                                <label for="Subzone_ID" class="control-label">Subzone ID</label>
                                <input id="Subzone_ID1" name="Subzone_ID" type="text" class="form-control" readonly />
                            </div>
                        </div>
                        <div class="form-row">
                            <div class="form-group col-md-6">
                                <label for="Zone_ID" class="control-label">Zone ID</label>
                                <input id="Zone_ID1" name="Zone_ID" type="text" class="form-control" readonly />
                            </div>
                        </div>
                        <div class="form-row">
                            <div class="form-group col-md-6">
                                <label for="Subzone_Name" class="control-label">Subzone Name</label>
                                <input id="Subzone_Name1" name="Subzone_Name" type="text" class="form-control"  />
                            </div>
                        </div>
                        <div class="form-row">
                            <div class="form-group col-md-6">
                                <label for="Capacity" class="control-label">Capacity</label>
                                <input id="Capacity1" name="Capacity" type="text" class="form-control"  />
                            </div>
                         </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" id="submitButton" class="btn btn-primary" style="background-color: #F3BC12; color:#23282B">Update</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Google Maps API -->
    <script async defer type="text/javascript" src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBiyENFIL4UsKCGGbXh3-nASJIMeJmpmYU&libraries=drawing"></script>

    <script type="text/javascript">
       
        function DisplayGoogleMap() {
            InitMap();
        }

        let map;    
        let coordinates = [];
        let polygon;

        function InitMap() {
            const location = new google.maps.LatLng(33.888630, 35.495480);
            const mapOptions = {
                zoom: 15,
                center: location,
                mapTypeId: google.maps.MapTypeId.ROADMAP
            };
            map = new google.maps.Map(document.getElementById('myDiv'), mapOptions);
            console.log('Map initialized with center:', location.toString());

            const coordinatesInput = document.getElementById('coordinates-data');
            const coordinatesValue = coordinatesInput.value;
            console.log('Initial coordinates from input:', coordinatesValue);

            if (coordinatesValue) {
                const coordsArray = coordinatesValue.split(',').map(Number);
                const path = [];
                for (let i = 0; i < coordsArray.length; i += 2) {
                    path.push({ lat: coordsArray[i], lng: coordsArray[i + 1] });
                }

                polygon = new google.maps.Polygon({
                    paths: path,
                    strokeColor: '#FF0000',
                    strokeOpacity: 0.8,
                    strokeWeight: 2,
                    fillColor: '#FF0000',
                    fillOpacity: 0.35,
                    editable: true,
                    draggable: true 
                });
                polygon.setMap(map);
                console.log('Polygon created with paths:', path);
                const bounds = new google.maps.LatLngBounds();
                polygon.getPath().forEach(function (latlng) {
                    bounds.extend(latlng);
                });
                map.fitBounds(bounds); // Adjust the map to fit the polygon bounds
                console.log('Map zoomed to polygon bounds.');
                // Attach event listeners for editing
                google.maps.event.addListener(polygon.getPath(), 'set_at', updateCoordinates);
                google.maps.event.addListener(polygon.getPath(), 'insert_at', updateCoordinates);
                google.maps.event.addListener(polygon.getPath(), 'remove_at', updateCoordinates);
            }

            const drawingManager = new google.maps.drawing.DrawingManager({
                drawingControlOptions: {
                    position: google.maps.ControlPosition.TOP_CENTER,
                    drawingModes: [
                        google.maps.drawing.OverlayType.POLYGON,
                    ]
                },
                polygonOptions: {
                    clickable: true,
                    draggable: false,
                    editable: true, 
                    fillColor: "#FF0000",
                    fillOpacity: 0.5
                }
            });

            drawingManager.setMap(map);
            console.log('DrawingManager initialized and set on map.');

            google.maps.event.addListener(drawingManager, 'polygoncomplete', function (newPolygon) {
                console.log('New polygon completed:', newPolygon);
                if (polygon) {
                    polygon.setMap(null); // Remove the old polygon if it exists
                    console.log('Removed previous polygon from map.');
                }
                polygon = newPolygon;
                console.log('New polygon set on map.');

                google.maps.event.addListener(polygon.getPath(), 'set_at', updateCoordinates);
                google.maps.event.addListener(polygon.getPath(), 'insert_at', updateCoordinates);
                google.maps.event.addListener(polygon.getPath(), 'remove_at', updateCoordinates);
                updateCoordinates();
            });

            function updateCoordinates() {
                coordinates = [];
                polygon.getPath().forEach(function (latlng) {
                    coordinates.push(latlng.lat(), latlng.lng());
                });
                coordinatesInput.value = coordinates.join(',');
                console.log('Updated coordinates:', coordinates.join(','));
               
            }
        }

        $('.supervisor').select2();
        // Call DisplayGoogleMap on page load
        window.onload = function () {
            DisplayGoogleMap();
           
         
         
        };
        $(document).ready(function () {
            var ZoneDataJson = sessionStorage.getItem('ZoneData');
            console.log('Retrieved zone data from sessionStorage:', ZoneDataJson);

            if (ZoneDataJson) {
                try {
                    var zoneData = JSON.parse(ZoneDataJson);
                    console.log('Parsed zoneData:', zoneData);

                    // Populate the page with the data
                    if ($('input[name="Zone_ID"]').length > 0) {
                        $('input[name="Zone_ID"]').val(zoneData.zone_ID);
                    }
                    if ($('input[name="Zone_Name"]').length > 0) {
                        $('input[name="Zone_Name"]').val(zoneData.zone_Name);
                    }
                    if ($('input[name="Area"]').length > 0) {
                        $('input[name="Area"]').val(zoneData.area);
                    }
                    if ($('input[name="Street"]').length > 0) {
                        $('input[name="Street"]').val(zoneData.street);
                    }
                    if ($('#active-checkbox').length > 0) {
                        $('#active-checkbox').prop('checked', zoneData.active);
                    }
                    if ($('input[name="Supervisor_ID"]').length > 0) {
                        $('input[name="Supervisor_ID"]').val(zoneData.supervisor_ID);
                    }
                    
                    if ($('input[name="AllCoordinates"]').length > 0) {
                        $('input[name="AllCoordinates"]').val(zoneData.allCoordinates);
                    }
                    // AJAX request to fetch subzone data
                    $.ajax({
                        url: '/Zone/GetSubzonesByZoneId', // Replace with your API endpoint
                        method: 'GET',
                        data: { zoneId: zoneData.zone_ID }, // Added missing comma here
                        success: function (response) {
                            console.log('Received response:', response);
                      
                            var $tableBody = $('#subzone-table tbody');
                            $tableBody.empty(); // Clear existing rows

                            $.each(response.subzones, function (index, item) {
                                var row = `<tr>
                                    <td>${item.subzone_Name}</td>
                                    <td>${item.capacity}</td>
                                    <td>
                                                <a onclick="openEditModal('${item.subzone_ID}', '${item.subzone_Name}', '${item.capacity}', '${item.zone_id}');" class="btn btn-primary" style="background-color: #F3BC12; border-color:#F3BC12; color:#23282B">
                                            <i class="fas fa-edit"></i>
                                        </a>
                                        <button class="btn btn-danger" onclick="DeleteSubzone(${item.subzone_ID});" style="background-color: #23282B; border-color:#23282B; color:#F3BC12">
                                            <i class="fas fa-trash"></i>
                                        </button>
                                    </td>
                                </tr>`;
                                $tableBody.append(row);
                            });

                            // Initialize DataTable
                            $("#subzone-table").DataTable();
                        },
                        error: function (xhr, status, error) {
                            console.error('Error loading subzone data:', error);
                        }
                    });
                } catch (e) {
                    console.error('Error parsing zone data JSON:', e);
                }
            } else {
                alert("No zone data found.");
            }
            setSupervisors();
        });
       

        document.getElementById("add-subzone-button").onclick = function () {
            var subzoneName = document.getElementById("subzone-name").value;
            var capacity = document.getElementById("subzone-capacity").value;
            var zoneId = document.getElementById("Zone_ID").value; // Ensure this field exists and has the correct ID

            if (subzoneName && capacity) {
                // Create the subzone object
                var subzoneData = {
                    Subzone_Name: subzoneName,
                    Capacity: capacity
                };

                // Send AJAX request
                $.ajax({
                    type: "POST",
                    url: "/Zone/AddSubzone", // Ensure this route is correct
                    contentType: "application/x-www-form-urlencoded; charset=UTF-8", // Set content type
                    data: $.param({
                        id: zoneId, // Zone ID
                        model: JSON.stringify(subzoneData) // Serialize subzone data as JSON string
                    }),
                    success: function (response) {
                        if (response.success) {
                            // Add to table
                            var tableBody = document.getElementById("subzone-table").querySelector('tbody');
                            var newRow = document.createElement('tr');

                            // Create cells for subzone name and capacity
                            var subZoneCell = document.createElement('td');
                            var capacityCell = document.createElement('td');
                            subZoneCell.textContent = subzoneName;
                            capacityCell.textContent = capacity;

                            // Create delete button
                            var deleteCell = document.createElement('td');
                            var deleteButton = document.createElement('button');
                            deleteButton.className = 'btn btn-danger';
                            deleteButton.innerHTML = '<i class="fas fa-trash"></i>';
                            deleteButton.onclick = function () {
                                if (confirm('Are you sure you want to delete this subzone?')) {
                                    DeleteSubzone(subzoneName);
                                }
                            };

                            deleteCell.appendChild(deleteButton);

                            // Append cells to row
                            newRow.appendChild(subZoneCell);
                            newRow.appendChild(capacityCell);
                            newRow.appendChild(deleteCell);

                            // Append row to table
                            tableBody.appendChild(newRow);
                            var noDataMessage = tableBody.querySelector('.dataTables_empty');
                            if (noDataMessage) {
                                noDataMessage.remove();
                            }
                            // Clear input fields after adding
                            document.getElementById("subzone-name").value = '';
                            document.getElementById("subzone-capacity").value = '';
                        } else {
                            alert(response.message);
                        }
                    },
                    error: function (xhr, status, error) {
                        alert("An error occurred: " + error);
                    }
                });
            } else {
                alert("Please fill in both fields.");
            }
        };
        document.getElementById("Zone-Form").onsubmit = function () {
            var subzones = [];
            var rows = document.querySelectorAll("#subzone-table tbody tr");

            rows.forEach(function (row) {
                var cells = row.getElementsByTagName("td");
                if (cells.length > 0) {
                    subzones.push({
                        Subzone_Name: cells[0].textContent,
                        Capacity: cells[1].textContent
                    });
                }
            });

            document.getElementById("subzones-data").value = JSON.stringify(subzones);
        };


        function DeleteSubzone(id) {
            var row = document.querySelector(`button[onclick*='DeleteSubzone(${id})']`).closest('tr'); // Get the row of the button

            if (confirm('Are you sure you want to delete this subzone?')) {
                // Simulate AJAX request (update URL and logic as needed)
                $.ajax({
                    url: '/Zone/DeleteSubzone/' + id,
                    type: 'DELETE',
                    data: { id: id }, // Use ID here
                    success: function (result) {
                        if (result.success) {
                            // Remove the row from the table
                            row.remove();
                         
                        } else {
                            alert('Error deleting subzone');
                        }
                    },
                    error: function (err) {
                        console.error(err);
                        alert('Error deleting subzone');
                    }
                });
            }
           

        }
        function openEditModal(subzoneId, subzoneName, capacity,zoneId) {
            $('#Subzone_ID1').val(subzoneId);
            $('#Subzone_Name1').val(subzoneName);
            $('#Capacity1').val(capacity);
            $('#Zone_ID1').val(zoneId);
            $('#addEventModal').modal('show');
        }
        $('#submitButton').on('click', function () {
            var subzoneId = $('#Subzone_ID1').val(); // Ensure this ID matches the one in the table
            var subzoneName = $('#Subzone_Name1').val();
            var capacity = $('#Capacity1').val();
            var zoneId = $('#Zone_ID1').val();

            // Make sure ID, name, and capacity are not empty
            if (subzoneId && subzoneName && capacity) {
                // Serialize the form data
                var formData = $('#addEventForm').serialize();

                // Make the AJAX request
                $.ajax({
                    url: '/Zone/SaveSubzone',
                    type: 'POST',
                    data: formData,
                    success: function (response) {
                        if (response.success) {
                            // Find and update the row in the table
                            var row = $('#subzone-table').find('tr').filter(function () {
                                var onclickAttr = $(this).find('a').attr('onclick');
                                return onclickAttr && onclickAttr.includes(subzoneId);
                            });

                            if (row.length) {
                                row.find('td').eq(0).text(subzoneName);
                                row.find('td').eq(1).text(capacity);
                            } else {
                                alert("Subzone row not found.");
                            }

                            // Hide the modal
                            $('#addEventModal').modal('hide');

                            alert("Subzone updated successfully!");
                        } else {
                            alert("Error: " + response.message);
                        }
                    },
                    error: function () {
                        alert("An error occurred while updating the subzone.");
                    }
                });
            } else {
                alert("Please fill in all required fields.");
            }
        });

        function setSupervisors() {
            $.ajax({
                url: '/User/GetSupervisor',
                type: 'GET',
                success: function (response) {
                    console.log("AJAX call succeeded, response:", response); // Log the response

                    var supervisorDropdown = document.getElementById("supervisor");
                    supervisorDropdown.innerHTML = ""; // Clear existing options

                    // Add a default "Select a Supervisor" option
                    var defaultOption = document.createElement("option");
                    defaultOption.value = "";
                    defaultOption.text = "Select a Supervisor";
                    defaultOption.disabled = true;
                    defaultOption.selected = true;
                    supervisorDropdown.appendChild(defaultOption);

                    // Check if the response is an array
                    if (Array.isArray(response)) {
                        response.forEach(function (supervisor) {
                            console.log("Adding supervisor:", supervisor); // Log each supervisor
                            var option = document.createElement("option");
                            option.value = supervisor.supervisor_ID;
                            option.text = supervisor.supervisor_Name;
                            option.setAttribute("data-supervisor-id", supervisor.supervisor_ID);
                            supervisorDropdown.appendChild(option);
                        });

                        // Set the selected option if Supervisor_ID is available
                        const supervisorId = $("#Supervisor_ID").val();
                        console.log("Supervisor Id selected " + $("#Supervisor_ID").val());
                        if (supervisorId) {
                            // Ensure the option exists before setting it as selected
                            const optionToSelect = Array.from(supervisorDropdown.options).find(option => option.value == supervisorId);
                            if (optionToSelect) {
                                optionToSelect.selected = true;
                            }
                        }
                    } else {
                        console.error('Response is not an array:', response);
                        alert('No supervisors available.');
                    }

                    // Update the hidden Supervisor_ID input when a supervisor is selected
                    // supervisorDropdown.addEventListener('change', function () {
                    //     var selectedSupervisorID = this.value;
                    //     document.getElementById("Supervisor_ID").value = selectedSupervisorID;
                    //     console.log("Selected Supervisor ID:", selectedSupervisorID); // Log selected ID

                    // });
                },
                error: function (xhr, status, error) {
                    console.log('Error:', error); // Log any error
                    alert('Error: ' + error);
                }
            });
        }
        function updateSupervisorID() {
            // Get the selected option
            var selectedOption = document.getElementById("supervisor").selectedOptions[0];
            // Get the Subzone_ID from the data attribute
            var supervisorId = selectedOption.getAttribute("data-supervisor-id"); // Use correct attribute for subzone
            // Set the Subzone_ID input field value
            document.getElementById("Supervisor_ID").value = supervisorId;
        }
    
    </script>
</body>
</html>
