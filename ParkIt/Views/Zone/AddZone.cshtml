
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
  
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Parking Lot Form</title>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <link rel="stylesheet" href="https://cdn.datatables.net/2.1.4/css/dataTables.dataTables.css" />
    <link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet" />
    <script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>
    <script src="https://cdn.datatables.net/2.1.4/js/dataTables.js"></script>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>

    <style>
        .container {
            display: flex;
            flex-direction: column;
            align-items: center;
            padding: 20px;
            max-width: 1500px; /* Adjust max width as needed */
            margin: 0 auto;
        }

        .form-container {
            display: flex;
            flex-direction: row; /* Change to row direction */
            justify-content: space-between;
            width: 90%;
            background-color: #e0e0e0;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
            column-gap: 20px; /* Add space between columns */
        }

        .form-left, .form-right {
            display: flex;
            flex-direction: column;
            width: 48%;
        }

            .form-left input, .form-right input, .form-right textarea, .form-left select {
                margin-bottom: 10px;
                padding: 8px;
                border: 1px solid #ccc;
                border-radius: 5px;
            }

            .form-right textarea {
                height: 150px;
            }

            .form-left input[type="file"] {
                padding: 3px;
            }

        .save-button {
            margin-top: 20px;
            padding: 10px 20px;
            background-color: #F3BC12;
            margin-bottom: 20px;
            color: #23282B;
            border: none;
            border-radius: 5px;
            cursor: pointer;
        }

        .button-container {
            text-align: center;
        }

        /* Table Container Styles */
        .table-container {
            flex: 1;
            margin-right: 20px;
        }

            .table-container table {
                width: 100%;
                border-collapse: collapse;
                background-color: #e0e0e0;
                border-radius: 10px;
                overflow: hidden;
            }

            .table-container th, .table-container td {
                padding: 8px 20px;
                border: 1px solid #ccc;
                text-align: center;
                min-height: 40px;
            }

            .table-container th {
                background-color: #A9A9A9;
                color: #23282B;
            }

            .table-container tr:nth-child(even) {
                background-color: #ddd;
            }

            .table-container tr:nth-child(odd) {
                background-color: #ffffff;
            }

        /* Map Container Styles */
        .map-container {
            position: relative; /* This allows the #info div to be positioned within .map-container */
            width: 100%;
            height: 500px; /* Adjust as needed */
        }


            .map-container #myDiv {
                width: 100%;
                height: 500px;
            }

        /* Grid Container Styles */
        .grid-container {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 10px;
        }

        /* Add Button Styling */
        .add-button {
            margin-top: 20px;
            padding: 10px 20px;
            font-size: 16px;
            cursor: pointer;
            background-color: #F3BC12;
            color: #23282B;
            border: none;
            border-radius: 5px;
            transition: background-color 0.3s;
        }

        .btn-danger {
            background-color: #23282B;
            border-color: #23282B;
            color: #F3BC12
        }

        .form-control {
            display: block;
            width: 100%;
            height: 34px;
            padding: 6px 12px;
            font-size: 14px;
            line-height: 1.42857143;
            color: #555;
            background-color: #fff;
            background-image: none;
            border: 1px solid #ccc;
            border-radius: 4px;
            -webkit-box-shadow: inset 0 1px 1px rgba(0, 0, 0, .075);
            box-shadow: inset 0 1px 1px rgba(0, 0, 0, .075);
            -webkit-transition: border-color ease-in-out .15s, -webkit-box-shadow ease-in-out .15s;
            -o-transition: border-color ease-in-out .15s, box-shadow ease-in-out .15s;
            transition: border-color ease-in-out .15s, box-shadow ease-in-out .15s
        }

        .form-control {
            border-radius: 0;
            box-shadow: none;
            border-color: #d2d6de
        }

        .select2-hidden-accessible {
            border: 0 !important;
            clip: rect(0 0 0 0) !important;
            height: 1px !important;
            margin: -1px !important;
            overflow: hidden !important;
            padding: 0 !important;
            position: absolute !important;
            width: 1px !important
        }

        .select2-container--default .select2-selection--single,
        .select2-selection .select2-selection--single {
            border: 1px solid #d2d6de;
            border-radius: 5px;
            padding: 6px 12px;
            height: 34px
        }

        .select2-container--default .select2-selection--single {
            background-color: #fff;
            border: 1px solid #aaa;
            border-radius: 5px
        }

        .select2-container .select2-selection--single {
            box-sizing: border-box;
            cursor: pointer;
            display: block;
            height: 28px;
            user-select: none;
            -webkit-user-select: none
        }

            .select2-container .select2-selection--single .select2-selection__rendered {
                padding-right: 10px
            }

            .select2-container .select2-selection--single .select2-selection__rendered {
                padding-left: 0;
                padding-right: 0;
                height: auto;
                margin-top: -3px
            }

        .select2-container--default .select2-selection--single .select2-selection__rendered {
           
            line-height: 28px
        }

        .select2-container--default .select2-selection--single,
        .select2-selection .select2-selection--single {
            border: 1px solid #d2d6de;
            border-radius: 5px !important;
            padding: 6px 12px;
            height: 40px !important
        }

            .select2-container--default .select2-selection--single .select2-selection__arrow {
                height: 26px;
                position: absolute;
                top: 6px !important;
                right: 1px;
                width: 20px
            }

        .select2-container--default .select2-results__option {
            padding: 8px 12px;
            font-size: 14px;
            border-bottom: 1px solid #ddd;
            border-radius: 5px;
        }

        .select2-container--default .select2-results__option--highlighted {
            background-color: #F3BC12 !important;
            color: white !important;
        }
        /* Style the search box container */
        .select2-container--default .select2-search--dropdown .select2-search__field {
            padding: 8px;
            border: 1px solid #d2d6de;
            border-radius: 5px;
            box-sizing: border-box;
            font-size: 14px;

        }

            /* Style the search box input */
            .select2-container--default .select2-search--dropdown .select2-search__field:focus {
                border-color: #F3BC12;
                outline: none;
                box-shadow: 0 0 0 0.2rem rgba(38, 143, 255, 0.25);
                border-radius: 5px;
            }

        .select2-container--default .select2-dropdown {
            border: 1px solid #d2d6de;
            border-radius: 5px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            background-color: #fff;
            max-height: 200px; /* Adjust as needed */
            overflow-y: auto; /* Enable scrolling if options overflow */
        }


    </style>

    <link rel="stylesheet" href="~/css/site.css">

</head>
<body>
    <div class="container">
        <h1 class="Title">Create Zone</h1>

        <form class="container" id="Zone-Form">
            <div class="form-container">
                <!-- Left Column: Zone Details -->
                <div class="form-left">
                    
                    <input type="text" name="Zone_Name" placeholder="Zone Name" id="Zone_Name" required />
              
                    <select name="Area" id="Area" class="Area form-control select2-hidden-accessible" data-placeholder="Select an Area" style="width: 100%;" tabindex="-1" aria-hidden="true" onchange="updateAreaId()">
                        <option value="" selected disabled>Select an Area</option>
                    </select>

                    <input type="text" name="AreaID" placeholder="Area" id="AreaID" hidden />
                    <br/>
                    <input type="text" name="Street" placeholder="Street"  />

                    <select name="supervisor" id="supervisor" class="supervisor form-control select2-hidden-accessible" data-placeholder="Select a Supervisor" style="width: 100%;" tabindex="-1" aria-hidden="true" onchange="updateSupervisorID()">
                        <option value="" selected disabled>Select a Supervisor</option>
                    </select>

                    <input type="number" id="Supervisor_ID" name="Supervisor_ID" hidden />

                    <label>
                        <input type="checkbox" name="Active" value="true" id="active-checkbox">
                        Active
                    </label>
                  
                    <button type="button" id="add-subzone-button" class="add-button" onclick="$('#AddSubzoneModal').modal('show')">Add Subzone</button>
      
                    <input type="text" id="coordinates-data" name="AllCoordinates" hidden/>

                    </br>
                    <!-- Table to show added subzones -->
                    <table id="subzone-table">
                        <thead>
                            <tr>
                                <th>Subzone</th>
                                <th>Capacity</th>
                                <th>Action</th>
                            </tr>
                        </thead>
                        <tbody>
                            <!-- Rows for subzones will be dynamically added here -->
                        </tbody>
                    </table>
                    <!-- Hidden fields for coordinates and subzone data -->
                   
                    <input type="hidden" id="subzones-data" name="subzonesData" />
                </div>

                <!-- Right Column: Subzones and Map -->
                <div class="form-right">
                    <!-- Map Container -->
                    <div class="map-container">
                        <div id="myDiv"></div>
                    </div>
                </div>
            </div>
            <div id="info" style="position:absolute; color: red; font-family: Arial, Helvetica, sans-serif; height: 200px; font-size: 12px"></div>
            <!-- Submit Button -->
            <div class="button-container">
                <input type="submit" class="save-button" value="Save">
            </div>
        </form>
    </div>
    <div class="modal fade" id="addEventModal" tabindex="-1" aria-labelledby="addEventModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title" id="addEventModalLabel">Add Area</h4>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" id="closeAddModal" onclick=" $('#addEventModal').modal('hide');"></button>
                </div>
                <div class="modal-body">
                    <form id="AddAreaForm">
                        <label for="Name" class="control-label"> Area Name</label>
                        <br/>
                        <input type="text" id="AreaName" name="Name" class="form-control" required />
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" id="submitButton" class="btn btn-primary" style="background-color: #F3BC12; color:#23282B">Add</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal fade" id="AddSubzoneModal" tabindex="-1" aria-labelledby="addEventModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title" id="addEventModalLabel">Add Subzone</h4>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" id="closeAddModal" onclick=" $('#addEventModal').modal('hide');"></button>
                </div>
                <div class="modal-body">
                    <form id="AddSubzoneForm">
                        <label for="Subzone_Name" class="control-label"> Subzone Name</label>
                        <br />
                        <input type="text" id="subzone-name" name="Subzone_Name" placeholder="Subzone Name" class="form-control" required /><br />
                        <label for="Capacity" class="control-label">Capacity</label>
                        <br />
                        <input type="number" id="subzone-capacity" name="Capacity" placeholder="Capacity" class="form-control" required/>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" id="submitButtonSubzone" class="btn btn-primary" style="background-color: #F3BC12; color:#23282B">Add</button>
                </div>
            </div>
        </div>
    </div>
    <!-- Google Maps API -->
    <script async defer type="text/javascript" src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBiyENFIL4UsKCGGbXh3-nASJIMeJmpmYU&libraries=drawing"></script>

    <script type="text/javascript">

        function DisplayGoogleMap() {
            InitMap();
        }
        setArea();

        var map;
        var mapcanvas;
        let coordinates = [];

        function InitMap() {
            var location = new google.maps.LatLng(33.888630, 35.495480);
            var mapOptions = {
                zoom: 12,
                center: location,
                mapTypeId: google.maps.MapTypeId.ROADMAP
            };

            map = new google.maps.Map(document.getElementById('myDiv'), mapOptions);
            var all_overlays = [];
            var selectedShape;
            var drawingManager = new google.maps.drawing.DrawingManager({
                drawingControlOptions: {
                    position: google.maps.ControlPosition.TOP_CENTER,
                    drawingModes: [
                        google.maps.drawing.OverlayType.POLYGON,
                    ]
                },
                markerOptions: {},
                polygonOptions: {
                    clickable: true,
                    draggable: false,
                    editable: true,
                    fillColor: "#F3BC12",
                    fillOpacity: 0.5
                }
            });

            drawingManager.setMap(map);

            function getPolygonCoords(newShape) {
                coordinates = [[]]; // Reset coordinates to the new structure
                var len = newShape.getPath().getLength();
                for (var i = 0; i < len; i++) {
                    // Push the latitude and longitude as an array
                    coordinates[0].push([
                        newShape.getPath().getAt(i).lng(),
                        newShape.getPath().getAt(i).lat()
                    ]);
                }
                document.getElementById('info').innerHTML = JSON.stringify(coordinates); // Display formatted coordinates
                return coordinates;
            }

            function clearSelection() {
                if (selectedShape) {
                    selectedShape.setEditable(false);
                    selectedShape = null;
                }
            }

            function stopDrawing() {
                drawingManager.setMap(null);
            }

            function setSelection(shape) {
                clearSelection();
                stopDrawing();
                selectedShape = shape;
                shape.setEditable(true);
            }

            function deleteSelectedShape() {
                if (selectedShape) {
                    selectedShape.setMap(null);
                    drawingManager.setMap(map);
                    coordinates = [[]]; // Reset coordinates on delete
                    document.getElementById('info').innerHTML = "";
                }
            }

            function CenterControl(controlDiv, map) {
                // set CSS for the control border
                var controlUI = document.createElement('div');
                controlUI.style.backgroundColor = "#fff";
                controlUI.style.border = '2px solid #fff';
                controlUI.style.borderRadius = '3px';
                controlUI.style.boxShadow = '0 2px 6px rgba(0,0,0,.3)';
                controlUI.style.cursor = 'pointer';
                controlUI.style.marginBottom = '22px';
                controlUI.style.textAlign = 'center';
                controlUI.title = 'Select to delete the shape';
                controlDiv.appendChild(controlUI);

                // set CSS for the control interior
                var controlText = document.createElement('div');
                controlText.style.color = 'rgb(25,25,25)';
                controlText.style.fontFamily = 'Roboto,Arial,sans-serif';
                controlText.style.fontSize = '16px';
                controlText.style.lineHeight = '38px';
                controlText.style.paddingLeft = '5px';
                controlText.style.paddingRight = '5px';
                controlText.innerHTML = "Delete Selected Area";
                controlUI.appendChild(controlText);

                // setup click event listener to delete the selected shape
                controlUI.addEventListener('click', function () {
                    deleteSelectedShape();
                });
            }

            google.maps.event.addListener(drawingManager, 'polygoncomplete', function (event) {
                var newShape = event;
                getPolygonCoords(newShape);

                google.maps.event.addListener(newShape.getPath(), "insert_at", function () {
                    getPolygonCoords(newShape);
                });

                google.maps.event.addListener(newShape.getPath(), 'set_at', function () {
                    getPolygonCoords(newShape);
                });

                // Set selection for the new shape
                setSelection(newShape);
            });

            google.maps.event.addListener(drawingManager, 'overlaycomplete', function (event) {
                all_overlays.push(event);
                if (event.type !== google.maps.drawing.OverlayType.MARKER) {
                    drawingManager.setDrawingMode(null);
                    var newShape = event.overlay;
                    newShape.type = event.type;
                    google.maps.event.addListener(newShape, 'click', function () {
                        setSelection(newShape);
                    });
                    setSelection(newShape);
                }
            });

            var centerControlDiv = document.createElement('div');
            var centerControl = new CenterControl(centerControlDiv, map);
            centerControlDiv.index = 1;
            map.controls[google.maps.ControlPosition.BOTTOM_CENTER].push(centerControlDiv);
        }

        function collectCoordinatesData() {
            const infoDiv = document.getElementById('info');
            // Assuming the data in the info div is in a specific format you can parse
            const coordinatesData = infoDiv.innerText; // or infoDiv.textContent
            document.getElementById('coordinates-data').value = coordinatesData;
        }

        let subzones = [];

        var accessToken = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbiI6ImV5SmhiR2NpT2lKSVV6STFOaUlzSW5SNWNDSTZJa3BYVkNKOS5leUpmYVdRaU9pSTJObVppWkRRd01EZGtPRFkyTXpFMk5ERXpZVGRsWlRBaUxDSjFjMlZ5Ym1GdFpTSTZJbTV2ZG1FMElpd2ljR0Z6YzNkdmNtUWlPaUlrTW1Fa01UQWtNbGN2WWtVMFlsaFFTakpKTDAxM1NuTnpZVEpaZFRScVkwZG9lbmMxY0cxT1ZtRXZRMnRJZEZaYVlUUlFValZhUXpOUmFrY2lMQ0p5YjJ4bGN5STZXMTBzSW1selFXTjBhWFpsSWpwMGNuVmxMQ0psWkdsMGIzSWlPbTUxYkd3c0ltTnlaV0YwWldSQmRDSTZJakl3TWpRdE1UQXRNREZVTVRBNk5UQTZOREF1T0RnMVdpSXNJblZ3WkdGMFpXUkJkQ0k2SWpJd01qUXRNVEF0TURGVU1UQTZOVEE2TkRBdU9EZzFXaUlzSWw5ZmRpSTZNQ3dpYVdRaU9pSTJObVppWkRRd01EZGtPRFkyTXpFMk5ERXpZVGRsWlRBaUxDSnBZWFFpT2pFM01qZzVPRFl5TVRZc0ltVjRjQ0k2TVRjek1UVTNPREl4Tm4wLnVQNDNMOUo0TWcxcDdLMVJEUkUzYUlyamdVMWNBaF8wckJsQWlkaW9DQU0iLCJpYXQiOjE3Mjg5ODYyMTYsImV4cCI6MTczMTU3ODIxNn0.72WF3Pa8Gg-fF6BOo0x5JVGtr36HQextkDURYB3UYPE"


        document.getElementById("submitButtonSubzone").onclick = function () {
            var subzoneName = document.getElementById("subzone-name").value;
            var capacity = document.getElementById("subzone-capacity").value;
            console.log(subzoneName);
            console.log(capacity);
            const payload = {
                zoneId: "66e496e7eb8d4e6eb9ccfc5e",  
                name: subzoneName,                  
                capacity: parseInt(capacity)                   
            };
            $.ajax({
                type: "POST",
                url: "https://api.parkit.nova4lb.com/admin/subzones",
                headers: {
                    'Authorization': 'Bearer ' + accessToken

                },
                data: JSON.stringify(payload),
                success: function (response) {
                    if (response) {
                        alert("Subzone Added Successfully");
                        $('#AddSubzoneModal').modal('close');
                    } else {
                        // Show error message
                        alert(response.message || "Failed to add Subzone");
                    }
                },
                error: function (xhr, status, error) {

                    alert("An error occurred: " + error);
                }
            });

            if (subzoneName && capacity) {
                const subzone = {
                    Subzone_Name: subzoneName,
                    Capacity: capacity
                };
                subzones.push(subzone); // Add subzone to the array

                var tableBody = document.getElementById("subzone-table").querySelector('tbody');
                var newRow = document.createElement('tr');

                // Create cells for subzone name and capacity
                var subZoneCell = document.createElement('td');
                var capacityCell = document.createElement('td');
                subZoneCell.textContent = subzoneName;
                capacityCell.textContent = capacity;

                // Create delete button
                var deleteCell = document.createElement('td');
                var deleteButton = document.createElement('button');
                deleteButton.className = 'btn btn-danger';
                deleteButton.innerHTML = '<i class="fas fa-trash"></i>';
                deleteButton.onclick = function () {
                    DeleteSubzone(deleteButton, subzoneName);
                };

                deleteCell.appendChild(deleteButton);

                // Append cells to row
                newRow.appendChild(subZoneCell);
                newRow.appendChild(capacityCell);
                newRow.appendChild(deleteCell);

                // Append row to table
                tableBody.appendChild(newRow);

                var noDataMessage = tableBody.querySelector('.dataTables_empty');
                if (noDataMessage) {
                    noDataMessage.remove();
                }

                // Clear input fields after adding
                document.getElementById("subzone-name").value = '';
                document.getElementById("subzone-capacity").value = '';
            } else {
                alert("Please fill in both fields.");
            }
        };

        function DeleteSubzone(button, subzoneName) {
            var row = button.closest('tr'); // Get the row of the button
            if (confirm('Are you sure you want to delete this subzone?')) {
                // Remove the row from the table
                row.remove();

                // Remove the subzone from the subzones array
                subzones = subzones.filter(subzone => subzone.Subzone_Name !== subzoneName);
            }
        }


        document.getElementById('Zone-Form').addEventListener('submit', function (event) {
          
            document.getElementById("subzones-data").value = JSON.stringify(subzones);
            collectCoordinatesData();
        });





        // Call DisplayGoogleMap on page load
        window.onload = function () {
            DisplayGoogleMap();
            setSupervisors();
            $('#subzone-table').DataTable();
        };
        $('.supervisor').select2();
        $('.Area').select2();
       
        function setSupervisors() {
            $.ajax({
                url: '/User/GetSupervisor',
                type: 'GET',
                success: function (response) {
                    console.log("AJAX call succeeded, response:", response); // Log the response

                    var supervisorDropdown = document.getElementById("supervisor");
                    supervisorDropdown.innerHTML = ""; // Clear existing options

                    // Add a default "Select a Supervisor" option
                    var defaultOption = document.createElement("option");
                    defaultOption.value = "";
                    defaultOption.text = "Select a Supervisor";
                    defaultOption.disabled = true;
                    defaultOption.selected = true;
                    supervisorDropdown.appendChild(defaultOption);

                    // Populate the supervisor dropdown with the new options
                    response.forEach(function (supervisor) {
                        console.log("Adding supervisor:", supervisor); // Log each supervisor
                        var option = document.createElement("option");
                        option.value = supervisor.supervisor_ID;
                        option.text = supervisor.supervisor_Name;
                        option.setAttribute("data-supervisor-id", supervisor.supervisor_ID);
                        supervisorDropdown.appendChild(option);
                    });

                    // Update the hidden Supervisor_ID input when a supervisor is selected
                    supervisorDropdown.addEventListener('change', function () {
                        var selectedSupervisorID = this.value;
                        document.getElementById("Supervisor_ID").value = selectedSupervisorID;
                        console.log("Selected Supervisor ID:", selectedSupervisorID); // Log selected ID
                    });
                },
                error: function (xhr, status, error) {
                    console.log('Error:', error); // Log any error
                    alert('Error: ' + error);
                }
            });
        }

        function updateSupervisorID() {
            // Get the selected option
            var selectedOption = document.getElementById("supervisor").selectedOptions[0];
            // Get the Subzone_ID from the data attribute
            var supervisorId = selectedOption.getAttribute("data-supervisor-id"); // Use correct attribute for subzone
            // Set the Subzone_ID input field value
            document.getElementById("Supervisor_ID").value = supervisorId;
        }


        var accessToken = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbiI6ImV5SmhiR2NpT2lKSVV6STFOaUlzSW5SNWNDSTZJa3BYVkNKOS5leUpmYVdRaU9pSTJObVppWkRRd01EZGtPRFkyTXpFMk5ERXpZVGRsWlRBaUxDSjFjMlZ5Ym1GdFpTSTZJbTV2ZG1FMElpd2ljR0Z6YzNkdmNtUWlPaUlrTW1Fa01UQWtNbGN2WWtVMFlsaFFTakpKTDAxM1NuTnpZVEpaZFRScVkwZG9lbmMxY0cxT1ZtRXZRMnRJZEZaYVlUUlFValZhUXpOUmFrY2lMQ0p5YjJ4bGN5STZXMTBzSW1selFXTjBhWFpsSWpwMGNuVmxMQ0psWkdsMGIzSWlPbTUxYkd3c0ltTnlaV0YwWldSQmRDSTZJakl3TWpRdE1UQXRNREZVTVRBNk5UQTZOREF1T0RnMVdpSXNJblZ3WkdGMFpXUkJkQ0k2SWpJd01qUXRNVEF0TURGVU1UQTZOVEE2TkRBdU9EZzFXaUlzSWw5ZmRpSTZNQ3dpYVdRaU9pSTJObVppWkRRd01EZGtPRFkyTXpFMk5ERXpZVGRsWlRBaUxDSnBZWFFpT2pFM01qZzVPRFl5TVRZc0ltVjRjQ0k2TVRjek1UVTNPREl4Tm4wLnVQNDNMOUo0TWcxcDdLMVJEUkUzYUlyamdVMWNBaF8wckJsQWlkaW9DQU0iLCJpYXQiOjE3Mjg5ODYyMTYsImV4cCI6MTczMTU3ODIxNn0.72WF3Pa8Gg-fF6BOo0x5JVGtr36HQextkDURYB3UYPE"


        $("#Zone-Form").submit(function (event) {
            event.preventDefault();

            var name = $("#Zone_Name").val();
            var coordinates = $("#coordinates-data").val();
            var areaId = $("#AreaID").val();
            console.log(coordinates);
            var coordinatesObject = JSON.parse(coordinates);
            $.ajax({
                type: "POST",
                url: "https://api.parkit.nova4lb.com/admin/zones",
                headers: {
                    'Authorization': 'Bearer ' + accessToken,
                    'Content-Type': 'application/json'
                },
                data: JSON.stringify({
                    name: name,
                    areaId: areaId,
                    location: {
                        coordinates: coordinatesObject
                    }
                }),
                success: function (response) {
                    if (response) {
                        alert("Zone  added successfully");
                        window.location.href = "/Views/Zones";
                    } else {
                        // Show error message
                        alert(response.message || "Failed to add Zone");
                    }
                },
                error: function (xhr, status, error) {

                    alert("An error occurred: " + error);
                }
            });
        });


        function setArea() {
            var accessToken = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbiI6ImV5SmhiR2NpT2lKSVV6STFOaUlzSW5SNWNDSTZJa3BYVkNKOS5leUpmYVdRaU9pSTJObVppWkRRd01EZGtPRFkyTXpFMk5ERXpZVGRsWlRBaUxDSjFjMlZ5Ym1GdFpTSTZJbTV2ZG1FMElpd2ljR0Z6YzNkdmNtUWlPaUlrTW1Fa01UQWtNbGN2WWtVMFlsaFFTakpKTDAxM1NuTnpZVEpaZFRScVkwZG9lbmMxY0cxT1ZtRXZRMnRJZEZaYVlUUlFValZhUXpOUmFrY2lMQ0p5YjJ4bGN5STZXMTBzSW1selFXTjBhWFpsSWpwMGNuVmxMQ0psWkdsMGIzSWlPbTUxYkd3c0ltTnlaV0YwWldSQmRDSTZJakl3TWpRdE1UQXRNREZVTVRBNk5UQTZOREF1T0RnMVdpSXNJblZ3WkdGMFpXUkJkQ0k2SWpJd01qUXRNVEF0TURGVU1UQTZOVEE2TkRBdU9EZzFXaUlzSWw5ZmRpSTZNQ3dpYVdRaU9pSTJObVppWkRRd01EZGtPRFkyTXpFMk5ERXpZVGRsWlRBaUxDSnBZWFFpT2pFM01qZzVPRFl5TVRZc0ltVjRjQ0k2TVRjek1UVTNPREl4Tm4wLnVQNDNMOUo0TWcxcDdLMVJEUkUzYUlyamdVMWNBaF8wckJsQWlkaW9DQU0iLCJpYXQiOjE3Mjg5ODYyMTYsImV4cCI6MTczMTU3ODIxNn0.72WF3Pa8Gg-fF6BOo0x5JVGtr36HQextkDURYB3UYPE"

            $.ajax({
                url: "https://api.parkit.nova4lb.com/admin/areas",
                type: 'GET',
                headers: {
                    'Authorization': 'Bearer ' + accessToken,
                },
                success: function (response) {
                    console.log("AJAX call succeeded, response:", response); // Log the response

                    var AreaDropdown = document.getElementById("Area");
                    AreaDropdown.innerHTML = ""; // Clear existing options

                    // Add a default "Select a Supervisor" option
                    var defaultOption = document.createElement("option");
                    defaultOption.value = "";
                    defaultOption.text = "Select an Area";
                    defaultOption.disabled = true;
                    defaultOption.selected = true;
                    AreaDropdown.appendChild(defaultOption);


                    var addOption = document.createElement("option");
                    addOption.value = "add-new";  // Unique value for identifying
                    addOption.text = "Add New Area";  // Display text
                    AreaDropdown.appendChild(addOption);

                    AreaDropdown.addEventListener('change', function () {
                        console.log("Dropdown changed: ", this.value); // Debug log
                        if (this.value === "add-new") {
                            console.log("Add New Area option selected"); // Debug log
                            $('#addEventModal').modal('show'); // Show the modal
                        }
                    });
                    // Populate the supervisor dropdown with the new options
                    response.forEach(function (area) {
                        console.log("Adding Area:", area); // Log each supervisor
                        var option = document.createElement("option");
                        option.value = area._id;
                        option.text = area.name;
                        option.setAttribute("data-area-id", area._id);
                        AreaDropdown.appendChild(option);
                    });

                
                },
                error: function (xhr, status, error) {
                    console.log('Error:', error); // Log any error
                    alert('Error: ' + error);
                }
            });
        }

        function updateAreaId() {
            // Get the selected option
            var selectedOption = document.getElementById("Area").selectedOptions[0];
            if (selectedOption.value == "add-new"){
                console.log("Add New Area option selected"); // Debug log
                $('#addEventModal').modal('show');
            }
            // Get the Subzone_ID from the data attribute
            var areaId = selectedOption.getAttribute("data-area-id"); // Use correct attribute for subzone
            // Set the Subzone_ID input field value
            document.getElementById("AreaID").value = areaId;
        }

        $("#submitButton").on("click", function () {
            var name = $("#AreaName").val();

            $.ajax({
                type: "POST",
                url: "https://api.parkit.nova4lb.com/admin/areas",
                headers: {
                    'Authorization': 'Bearer ' + accessToken,
                    'Content-Type': 'application/json'
                },
                data: JSON.stringify({
                    name: name
                }), // Ensure this object is closed correctly
                success: function (response) {
                    if (response) {
                        alert("Area added successfully");
                        $('#addEventModal').modal('hide'); // Close the modal after success
                        setArea(); // Call setArea() to refresh the dropdown or perform other actions
                    } else {
                        // Show error message
                        alert(response.message || "Failed to add Area");
                    }
                },
                error: function (xhr, status, error) {
                    alert("An error occurred: " + error);
                }
            });
        });

    </script>
</body>
</html>
