@model ParkIt.ViewModel.ZoneListViewModel

<head>
    <!-- Google Maps JS -->
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBiyENFIL4UsKCGGbXh3-nASJIMeJmpmYU"></script>
    <link rel="stylesheet" href="https://cdn.datatables.net/2.1.4/css/dataTables.dataTables.css" />
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.datatables.net/2.1.4/js/dataTables.js"></script>
</head>
<style>
    .container {
        display: flex;
        justify-content: space-between;
        padding: 20px;
    }

    .table-container {
        flex: 2; /* Increased flex value for more space */
        margin-right: 20px;
    }


        .table-container table {
            width: 100%;
            border-collapse: collapse;
            background-color: #e0e0e0;
            border-radius: 10px;
            overflow: hidden;
        }

        .table-container th,
        .table-container td {
            padding: 10px;
            border: 1px solid #ccc;
            text-align: left;
        }

        .table-container th {
            background-color: #A9A9A9;
            color: #23282B;
        }

        .table-container tr:nth-child(even) {
            background-color: #ddd;
        }

        .table-container tr:nth-child(odd) {
            background-color: #ffffff;
        }

    .save-button2 {
        margin-top: 20px;
        padding: 10px 20px;
        background-color: #F3BC12;
        color: #23282B;
        border: none;
        border-radius: 5px;
        cursor: pointer;
    }

       

    .profile-pic {
        display: flex;
        align-items: center;
        justify-content: center;
        background-color: #F3BC12;
        border-radius: 50%;
        width: 100px;
        height: 100px;
        color: white;
        font-size: 40px;
        margin-bottom: 20px;
    }

    .map-container {
        flex: 1; /* Decreased flex value for less space */
    }

        .map-container #myDiv {
            width: 100%;
            height: 500px;
        }

    /* Form Container Styles */
    /* Form Container Styles */
    .modal .form-container {
        display: flex;
        justify-content: space-between;
        width: 100%;
        background-color: #e0e0e0;
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    }

    /* Left and Right Sections */
    .modal .form-left,
    .modal .form-right {
        display: flex;
        flex-direction: column;
        width: 48%;
    }

        .modal .form-left input,
        .modal .form-left select,
        .modal .form-right input {
            margin-bottom: 10px;
            padding: 8px;
            border: 1px solid #ccc;
            border-radius: 5px;
        }

    /* Map Container */
    .modal .map-container {
        background-color: #fff;
        border: 1px solid #ccc;
        border-radius: 10px;
        height: 100%;
        min-height: 400px;
    }

    #myDiv {
        width: 100%;
        height: 100%;
    }

    /* Save Button */
    .modal .save-button {
        align-self: flex-end;
        margin-top: 20px;
        padding: 10px 20px;
        background-color: #F3BC12;
        color: #23282B;
        border: none;
        border-radius: 5px;
        cursor: pointer;
    }

 

    .add-button {
        margin-top: 20px;
        padding: 10px 20px;
        font-size: 16px;
        cursor: pointer;
        background-color: #F3BC12;
        color: #23282B;
        border: none;
        border-radius: 5px;
        transition: background-color 0.3s;
    }
    /* Modal Footer Button */
    .modal-footer .btn-danger {
        background-color: #23282B;
        border-color: #23282B;
    }

</style>

<div class="container">
    <!-- Table Container -->
    <div class="table-container">
        <h1>@ViewData["Title"]</h1>
        <table id="ZonesTable">
            <thead>
                <tr>
                    <th>NAME</th>
                    <th>AREA</th>
                    <th>#PARKING LOTS</th>
                    <th>#RUNNERS</th>
                    <th>ACTIVE</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @if (Model?.Zones == null)
                {
                    <p>No Data Available</p>
                }
                else
                {
                    @foreach (var z in Model.Zones)
                    {
                        <tr data-coordinates="@z.AllCoordinates" data-zone-id="@z.Zone_ID" >
                            <td>@z.Zone_Name</td>
                            <td>@z.Area</td>
                            <td>@z.NumberOfSubzone</td>
                            <td>@z.NumberOfRunner</td>
                            <td>@z.Active</td>
                            <td>
                                <a onclick="EditZone(@z.Zone_ID)" class="btn btn-primary" style="background-color: #F3BC12; border-color:#F3BC12; color:#23282B">
                                    <i class="fas fa-edit"></i>
                                </a>
                                <button class="btn btn-danger" onclick="DeleteZone(@z.Zone_ID)" style="background-color: #23282B; border-color:#23282B; color:#F3BC12">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </td>
                        </tr>

                       
                    }
                }
            </tbody>
        </table>
        <button onclick="location.href='@Url.Action("AddZone", "Zone")'" class="save-button2">Add</button>

        <!-- show info Modal -->
            <div class="modal fade" id="editEventModal" tabindex="-1" aria-labelledby="editEventModalLabel" aria-hidden="true">
                <div class="modal-dialog modal-lg">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h4 class="modal-title" id="editEventModalLabel">Zone Info</h4>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" id="closeEditModal"></button>
                        </div>
                        <div class="modal-body">
                           <div class="form-container">
                                    <!-- Left Section for Form -->
                                    <div class="form-left">
                                        <label for="Zone_ID"> Zone ID</label>
                                        <input type="number" id="Zone_ID" name="Zone_ID"  readonly />
                                        <label for="Zone_Name">Zone Name</label>
                                        <input type="text" name="Zone_Name" placeholder="Zone Name"  readonly />
                                        <label name="Area">Area</label>
                                        <input type="text" name="Area" placeholder="Area" readonly />
                                        <label for="Street">Street</label>
                                        <input type="text" name="Street" placeholder="Street"  readonly />
                                        <label for="supervisor">Supervisor Name</label>
                                        <input name="supervisor " id="supervisor" placeholder="supervisor"  readonly />
                                        <br />
                                        <label>
                                            <input type="checkbox" name="Active" value="true" id="active-checkbox" disabled >
                                            Active
                                        </label>

                                        <!-- Subzone fields -->
                                        <table id="subzone-table">
                                            <thead>
                                                <tr>
                                                    <th>Subzone</th>
                                                    <th>Capacity</th>
                                                   
                                                </tr>
                                            </thead>
                                            <tbody>
                                             
                                            </tbody>
                                        </table>
                                    </div>
                                    <!-- Right Section for Map -->
                                    <div class="form-right">
                                        <div class="map-container">
                                    <div id="modalMap" style="width: 100%; height: 400px;"></div>
                                        </div>
                                    </div>
                                </div>
                        </div>
                    </div>
                </div>
            </div>
    </div>

    <!-- Map Container -->
    <div class="map-container">
        <div id="myDiv"></div>
    </div>
</div>


<script type="text/javascript">
    var coordinatesData = {}; // Initialize coordinatesData
    $(document).on('click', 'tr[data-zone-id]', function () {
        var zoneId = $(this).data('zone-id');
        fetchZoneDetails(zoneId);
        $('#editEventModal').modal('show');
    });

    function fetchCoordinates() {
        return fetch('/Zone/GetAllCoordinates')
            .then(response => response.json())
            .then(data => {
                console.log('Fetched coordinates data:', data); // Debugging

                coordinatesData = {}; // Reset the object before populating
                data.forEach(item => {
                    // Ensure item.zone_ID and item.allCoordinates are present and valid
                    if (item.zone_ID && item.allCoordinates) {
                        coordinatesData[item.zone_ID] = item.allCoordinates;
                    } else {
                        console.error('Invalid data item:', item);
                    }
                });

                console.log('Coordinates data object:', coordinatesData); // Debugging
            })
            .catch(error => {
                console.error('Error fetching coordinates:', error);
            });
    }

    function DisplayZoneOnMap(zoneId) {
        console.log('Requested zone ID:', zoneId); // Debugging
        console.log('Current coordinates data:', coordinatesData); // Debugging

        var coordinates = coordinatesData[zoneId];
        console.log('Coordinates for zone ID', zoneId, ':', coordinates); // Debugging

        if (coordinates) {
            var coordsArray = coordinates.split(',').map(Number);

            if (coordsArray.length % 2 !== 0) {
                console.error('Invalid coordinate data.');
                alert('Invalid coordinate data for the selected zone.');
                return;
            }

            var latLngs = [];
            for (var i = 0; i < coordsArray.length; i += 2) {
                latLngs.push({ lat: coordsArray[i], lng: coordsArray[i + 1] });
            }
            DisplayGoogleMap(latLngs);
            
        } else {
            console.error('No coordinates found for zone ID:', zoneId);
            alert('No coordinates available for the selected zone.');
        }
    }
 
    function DisplayGoogleMap(latLngs) {
        // Initialize map options
        var mapOptions = {
            zoom: 15,
            mapTypeId: google.maps.MapTypeId.ROADMAP
        };

        // Create the map
        var map = new google.maps.Map(document.getElementById("myDiv"), mapOptions);
        // Initialize an array for the coordinates
        var pathCoordinates = latLngs.map(coord => new google.maps.LatLng(coord.lat, coord.lng));

        // Create a Polygon
        var polygon = new google.maps.Polygon({
            paths: pathCoordinates,
            strokeColor: "#FF0000",
            strokeOpacity: 0.8,
            strokeWeight: 2,
            fillColor: "#FF0000",
            fillOpacity: 0.35
        });
        polygon.setMap(map);

        // Create a LatLngBounds object
        var bounds = new google.maps.LatLngBounds();
        pathCoordinates.forEach(coord => bounds.extend(coord));

        // Adjust the map to fit the bounds
        map.fitBounds(bounds);

        // Add markers for each coordinate
        pathCoordinates.forEach(coord => {
            new google.maps.Marker({
                position: coord,
                map: map,
                title: 'Coordinate'
            });
        });
    }


    window.onload = function () {
        fetchCoordinates();
        DisplayGoogleMap([
            { lat: 33.888630, lng: 35.495480 } // Default coordinates or adjust as needed
        ]);
        $('#ZonesTable').DataTable();
    };
    function DeleteZone(id) {
        if (confirm('Are you sure you want to delete this zone?')) {
            $.ajax({
                url: '@Url.Action("RemoveZone", "Zone")',
                type: 'POST',
                data: {zoneid : id },
                success: function (result) {
                    if (result.success) {
                        location.reload();
                    } else {
                        alert('Error deleting zone');
                    }
                },
                error: function (err) {
                    console.error(err);
                    alert('Error deleting zone');
                }
            });
        }
    }

    function EditZone(id) {
        if (confirm('Are you sure you want to edit this zone?')) {
            window.location.href = '@Url.Action("EditZone", "Zone")/' + id;
        }
    }
    function fetchZoneDetails(zoneId) {
        $.ajax({
            url: '/Zone/GetZoneDetails', 
            type: 'GET',
            data: { id: zoneId },
            success: function (result) {
                if (result.success) {
                    console.log(result);
                    populateModal(result.data);
                    $('#editEventModal').modal('show');
                } else {
                    alert('Error fetching zone details');
                }
            },
            error: function (err) {
                console.error(err);
                alert('Error fetching zone details');
            }
        });
    }
    function populateModal(zone) {
        $('#Zone_ID').val(zone.zone_ID);
        $('input[name="Zone_Name"]').val(zone.zone_Name);
        $('input[name="Area"]').val(zone.area);
        $('input[name="Street"]').val(zone.street);
        $('#supervisor').val(zone.supervisor);
        $('#active-checkbox').prop('checked', zone.active);

        $('#subzone-table tbody').empty();
        if (Array.isArray(zone.subzones)) {
            zone.subzones.forEach(subzone => {
                $('#subzone-table tbody').append(`
                    <tr>
                        <td>${subzone.name}</td>
                        <td>${subzone.capacity}</td>
                    </tr>
                `);
            });
            DisplayModalMap(zone.coordinate);
        } else {
            console.error('Subzones is not an array or is undefined');
        }
     
    }





    //Modal Map

    function DisplayModalMap(latLngsString) {
        console.log('LatLngs received for modal map:', latLngsString); // Debugging

            // Convert the comma-separated string into an array of LatLng objects
            var latLngs = latLngsString.split(',').reduce((acc, curr, index, array) => {
                if (index % 2 === 0) { // lat
                    acc.push({ lat: parseFloat(curr), lng: parseFloat(array[index + 1]) });
                }
                return acc;
            }, []);

            console.log('Parsed latLngs:', latLngs); // Debugging

            // Ensure latLngs is an array
            if (!Array.isArray(latLngs)) {
                console.error('latLngs is not an array:', latLngs);
                alert('Invalid coordinates data for the selected zone.');
                return;
            }

            // Initialize map options
            var mapOptions = {
                zoom: 15,
                mapTypeId: google.maps.MapTypeId.ROADMAP
            };

            // Create the map
            var map = new google.maps.Map(document.getElementById("modalMap"), mapOptions);

            // Initialize an array for the coordinates
            var pathCoordinates = latLngs.map(coord => new google.maps.LatLng(coord.lat, coord.lng));

            // Create a Polygon
            var polygon = new google.maps.Polygon({
                paths: pathCoordinates,
                strokeColor: "#FF0000",
                strokeOpacity: 0.8,
                strokeWeight: 2,
                fillColor: "#FF0000",
                fillOpacity: 0.35
            });
            polygon.setMap(map);

            // Create a LatLngBounds object
            var bounds = new google.maps.LatLngBounds();
            pathCoordinates.forEach(coord => bounds.extend(coord));

            // Adjust the map to fit the bounds
            map.fitBounds(bounds);

            // Add markers for each coordinate
            pathCoordinates.forEach(coord => {
                new google.maps.Marker({
                    position: coord,
                    map: map,
                    title: 'Coordinate'
                });
            });
        }

</script>
