

<head>
    <!-- Google Maps JS -->
 

    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBiyENFIL4UsKCGGbXh3-nASJIMeJmpmYU"></script>
    <link rel="stylesheet" href="https://cdn.datatables.net/2.1.4/css/dataTables.dataTables.css" />
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.datatables.net/2.1.4/js/dataTables.js"></script>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">
  
    <link rel="stylesheet" href="~/css/site.css">
</head>
<style>
    .container {
        display: flex;
        justify-content: space-between;
        padding: 20px;
    }

    .table-container {
        flex: 2; /* Increased flex value for more space */
        margin-right: 20px;
    }


    .profile-pic {
        display: flex;
        align-items: center;
        justify-content: center;
        background-color: #F3BC12;
        border-radius: 50%;
        width: 100px;
        height: 100px;
        color: white;
        font-size: 40px;
        margin-bottom: 20px;
    }

    .map-container {
        flex: 1; /* Decreased flex value for less space */
    }

        .map-container #myDiv {
            width: 100%;
            height: 100%;
        }

    /* Form Container Styles */
    /* Form Container Styles */
    .modal .form-container {
        display: flex;
        justify-content: space-between;
        width: 100%;
        background-color: #e0e0e0;
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    }

    /* Left and Right Sections */
    .modal .form-left,
    .modal .form-right {
        display: flex;
        flex-direction: column;
        width: 48%;
    }

        .modal .form-left input,
        .modal .form-left select,
        .modal .form-right input {
            margin-bottom: 10px;
            padding: 8px;
            border: 1px solid #ccc;
            border-radius: 5px;
        }

    /* Map Container */
    .modal .map-container {
        background-color: #fff;
        border: 1px solid #ccc;
        border-radius: 10px;
        height: 100%;
        min-height: 400px;
    }

    #myDiv {
        width: 100%;
        height: 100%;
    }

    /* Save Button */
    .modal .save-button {
        align-self: flex-end;
        margin-top: 20px;
        padding: 10px 20px;
        background-color: #F3BC12;
        color: #23282B;
        border: none;
        border-radius: 5px;
        cursor: pointer;
    }

 

    .add-button {
        margin-top: 20px;
        padding: 10px 20px;
        font-size: 16px;
        cursor: pointer;
        background-color: #F3BC12;
        color: #23282B;
        border: none;
        border-radius: 5px;
        transition: background-color 0.3s;
    }
    /* Modal Footer Button */
    .modal-footer .btn-danger {
        background-color: #23282B;
        border-color: #23282B;
    }

    tbody, td, tfoot, th, thead, tr {
        border-color: inherit !important;
        border-width: 0 !important;
    }
</style>

<h1 class="Title">Zones Table</h1>

<div class="container">
    <!-- Table Container -->
    <div class="table-container">
        <p class="text-right">
            <a class="btn btn-primary" id="AddZoneButton" onclick="location.href='@Url.Action("AddZone", "Zone")'">Create New Zone</a>
        </p>
        <p class="text-right">
            <a onclick="location.href='@Url.Action("DownloadExcel", "Zone")'" class="btn btn-primary">
                <i class="fas fa-share-square"></i> Export As Excel
            </a>
        </p>
        <table id="ZonesTable" class="table table-hover table-striped">
            <thead class="thead-dark">
                <tr>
                    <th>NAME</th>
                    <th>AREA</th>
                    <th>#PARKING LOTS</th>
                    <th>#RUNNERS</th>
                    <th>ACTIVE</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
               
            </tbody>
        </table>


        <!-- show info Modal -->
            <div class="modal fade" id="editEventModal" tabindex="-1" aria-labelledby="editEventModalLabel" aria-hidden="true">
                <div class="modal-dialog modal-lg">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h4 class="modal-title" id="editEventModalLabel">Zone Info</h4>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" id="closeEditModal"></button>
                        </div>
                        <div class="modal-body">
                           <div class="form-container">
                                    <!-- Left Section for Form -->
                                    <div class="form-left">
                                        <label for="Zone_ID"> Zone ID</label>
                                        <input type="text" id="Zone_ID" name="Zone_ID"  readonly />
                                        <label for="Zone_Name">Zone Name</label>
                                        <input type="text" name="Zone_Name" placeholder="Zone Name"  readonly />
                                        <label name="Area">Area</label>
                                        <input type="text" name="Area" placeholder="Area" readonly />
                                        <label for="Street">Street</label>
                                        <input type="text" name="Street" placeholder="Street"  readonly />
                                        <label for="supervisor">Supervisor Name</label>
                                        <input name="supervisor " id="supervisor" placeholder="supervisor"  readonly />
                                        <br />
                                        <label>
                                            <input type="checkbox" name="Active" value="true" id="active-checkbox" disabled >
                                            Active
                                        </label>

                                        <!-- Subzone fields -->
                                        <table id="subzone-table">
                                            <thead>
                                                <tr>
                                                    <th>Subzone</th>
                                                    <th>Capacity</th>
                                                   
                                                </tr>
                                            </thead>
                                            <tbody style="text-align: center;">
                                             
                                            </tbody>
                                        </table>
                                    </div>
                                    <!-- Right Section for Map -->
                                    <div class="form-right">
                                        <div class="map-container">
                                    <div id="modalMap" style="width: 100%; height: 100%;"></div>
                                        </div>
                                    </div>
                                </div>
                        </div>
                    </div>
                </div>
            </div>
    </div>

    <!-- Map Container -->
    <div class="map-container">
        <div id="myDiv"></div>
    </div>
</div>
<div class="modal fade" id="AddSubzoneModal" tabindex="-1" aria-labelledby="addEventModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title" id="addEventModalLabel">Add Subzone</h4>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" id="closeAddModal" onclick=" $('#addEventModal').modal('hide');"></button>
            </div>
            <div class="modal-body">
                <form id="AddSubzoneForm">
                    <label for="Zone_ID" class="control-label">Zone_ID</label>
                    <br />
                    <input type="text" id="Zone_ID2" name="Zone_ID" placeholder="Zone ID" class="form-control" readonly /><br />
                    <label for="Subzone_Name" class="control-label"> Subzone Name</label>
                    <br />
                    <input type="text" id="subzone-name" name="Subzone_Name" placeholder="Subzone Name" class="form-control" required /><br />
                    <label for="Capacity" class="control-label">Capacity</label>
                    <br />
                    <input type="number" id="subzone-capacity" name="Capacity" placeholder="Capacity" class="form-control" required />
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" id="submitButtonSubzone" class="btn btn-primary" style="background-color: #F3BC12; color:#23282B">Add</button>
            </div>
        </div>
    </div>
</div>

<script type="text/javascript">
    
    var accessToken = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbiI6ImV5SmhiR2NpT2lKSVV6STFOaUlzSW5SNWNDSTZJa3BYVkNKOS5leUpmYVdRaU9pSTJObVppWkRRd01EZGtPRFkyTXpFMk5ERXpZVGRsWlRBaUxDSjFjMlZ5Ym1GdFpTSTZJbTV2ZG1FMElpd2ljR0Z6YzNkdmNtUWlPaUlrTW1Fa01UQWtNbGN2WWtVMFlsaFFTakpKTDAxM1NuTnpZVEpaZFRScVkwZG9lbmMxY0cxT1ZtRXZRMnRJZEZaYVlUUlFValZhUXpOUmFrY2lMQ0p5YjJ4bGN5STZXMTBzSW1selFXTjBhWFpsSWpwMGNuVmxMQ0psWkdsMGIzSWlPbTUxYkd3c0ltTnlaV0YwWldSQmRDSTZJakl3TWpRdE1UQXRNREZVTVRBNk5UQTZOREF1T0RnMVdpSXNJblZ3WkdGMFpXUkJkQ0k2SWpJd01qUXRNVEF0TURGVU1UQTZOVEE2TkRBdU9EZzFXaUlzSWw5ZmRpSTZNQ3dpYVdRaU9pSTJObVppWkRRd01EZGtPRFkyTXpFMk5ERXpZVGRsWlRBaUxDSnBZWFFpT2pFM01qZzVPRFl5TVRZc0ltVjRjQ0k2TVRjek1UVTNPREl4Tm4wLnVQNDNMOUo0TWcxcDdLMVJEUkUzYUlyamdVMWNBaF8wckJsQWlkaW9DQU0iLCJpYXQiOjE3Mjg5ODYyMTYsImV4cCI6MTczMTU3ODIxNn0.72WF3Pa8Gg-fF6BOo0x5JVGtr36HQextkDURYB3UYPE"
       
    $(document).ready(function () {
        $.ajax({
            url: "https://api.parkit.nova4lb.com/admin/zones",
            type: 'GET',
            headers: {
                'Authorization': 'Bearer ' + accessToken
            },
            success: function (response) {
                if (response) {
                    var tableBody = $('#ZonesTable tbody');
                    tableBody.empty();

                    $.each(response, function (index, item) {
                        console.log(item);

                        var row = `
                 <tr>
                     <td data-zone-id="${item._id}">${item.name}</td>
                     <td>${item.area ? item.area.name : 'N/A'}</td>
                     <td>null</td>
                     <td>null</td> 
                     <td>${item.isActive ? 'On' : 'Off'}</td>
                     <td>
                         <a onclick="fetchZoneDetails('${item._id}');" class="btn btn-primary" style="background-color: #23282B; border-color:#23282B; color:#F3BC12; padding: 5px 10px; width: 35px; text-align: center;">
                             <i class="bi bi-info-circle" style="font-size: 15px; font-weight: bold"></i>
                         </a>
                         <a class="btn btn-primary" onclick="EditZone('${item._id}')" style="background-color: #F3BC12; border-color:#F3BC12; color:#23282B; padding: 5px 10px; width: 35px; text-align: center;">
                             <i class="fas fa-edit"></i>
                         </a>
                         <button class="btn btn-danger" onclick="DeleteZone('${item._id}')" style="background-color: #23282B; border-color:#23282B; color:#F3BC12; padding: 5px 10px; width: 35px; text-align: center;">
                             <i class="fas fa-trash"></i>
                         </button>
                              <button class="btn btn-primary" onclick="AddSubzone('${item._id}')" style="background-color: #F3BC12; border-color:#F3BC12; color:#23282B; padding: 5px 10px; width: 35px; text-align: center;">
                                      <i class="fa fa-plus"></i>
                           </button>
                     </td>
                 </tr>`;

                        tableBody.append(row);
                    });

                    // Check if DataTable is already initialized, and initialize if it's not
                    if (!$.fn.DataTable.isDataTable('#ZonesTable')) {
                        $('#ZonesTable').DataTable();
                    }
                } else {
                    alert("Failed to fetch zone data.");
                }
            },
            error: function (xhr, status, error) {
                console.error("Error: " + error);
            }
        });


    });
    function AddSubzone(zoneId){
      
        $('#AddSubzoneModal').modal('show');
        $('#Zone_ID2').val(zoneId);
        document.getElementById("submitButtonSubzone").onclick = function () {
            var subzoneName = document.getElementById("subzone-name").value;
            var capacity = document.getElementById("subzone-capacity").value;
            const payload = {
                zoneId: zoneId,
                name: subzoneName,
                capacity: parseInt(capacity)
            };


            $.ajax({
                type: "POST",
                url: "https://api.parkit.nova4lb.com/admin/subzones",
                headers: {
                    'Authorization': 'Bearer ' + accessToken,
                    'Content-Type': 'application/json'
                },
                data: JSON.stringify(payload),
                success: function (response) {
                    if (response) {
                        alert("Subzone Added Successfully");
                        $('#AddSubzoneModal').modal('hide');

                    } else {
                        // Show error message
                        alert(response.message || "Failed to add Subzone");
                    }
                },
                error: function (xhr, status, error) {

                    alert("An error occurred: " + error);
                }
            });
        }
    }
    var coordinatesData = {}; // Initialize coordinatesData

    // Function to fetch all zones and plot them on the map
    function fetchAndDisplayZones() {
        $.ajax({
            url: "https://api.parkit.nova4lb.com/admin/zones",
            method: 'GET',
            headers: {
                'Authorization': 'Bearer ' + accessToken,
                'Content-Type': 'application/json'
            },
            success: function (response) {
                displayAllZonesOnMap(response);
            },
            error: function (err) {
                console.error('Error fetching zones:', err);
            }
        });
    }

    // Function to display all zones on the map
    function displayAllZonesOnMap(zones) {
        var mapOptions = {
            zoom: 10,
            center: { lat: 33.884026, lng: 35.491131 }, // Set a default center
            mapTypeId: google.maps.MapTypeId.ROADMAP
        };

        var map = new google.maps.Map(document.getElementById("myDiv"), mapOptions);
        var bounds = new google.maps.LatLngBounds(); // Create a bounds object for adjusting the map view

        // Iterate through the zones to create polygons and markers
        zones.forEach(zone => {
            const coordinates = zone.location.coordinates[0].map(coord => ({
                lat: coord[1],
                lng: coord[0]
            }));

            // Create a polygon for each zone
            const polygon = new google.maps.Polygon({
                paths: coordinates,
                strokeColor: '#FF0000',
                strokeOpacity: 0.8,
                strokeWeight: 2,
                fillColor: '#FF0000',
                fillOpacity: 0.35
            });
            polygon.setMap(map); // Set the polygon on the map

            // Extend the bounds for each polygon
            coordinates.forEach(coord => bounds.extend(new google.maps.LatLng(coord.lat, coord.lng)));

            // Create a marker for each zone at the first coordinate
            const zoneMarker = new google.maps.Marker({
                position: coordinates[0], // Use the first coordinate of the polygon as the marker position
                map: map,
                title: zone.name, // Title can include zone name
                icon: {
                    url: 'http://maps.google.com/mapfiles/ms/icons/red-dot.png', // Marker icon URL
                    scaledSize: new google.maps.Size(30, 30), // Default size for the icon
                }
            });

            // Add an event listener to dynamically change the icon size based on zoom level
            google.maps.event.addListener(map, 'zoom_changed', function () {
                const zoomLevel = map.getZoom();
                const newSize = Math.max(30, 30 + (zoomLevel - 10) * 5); // Adjust size based on zoom level
                zoneMarker.setIcon({
                    url: 'http://maps.google.com/mapfiles/ms/icons/red-dot.png',
                    scaledSize: new google.maps.Size(newSize, newSize),
                });
            });
        });

        // Adjust the map to fit all bounds
        map.fitBounds(bounds);
    }

    // Call the function to fetch and display zones on map load




    function DisplayZoneOnMap(zoneId) {
        console.log('Requested zone ID:', zoneId); // Debugging
        console.log('Current coordinates data:', coordinatesData); // Debugging

        var coordinates = coordinatesData[zoneId];
        console.log('Coordinates for zone ID', zoneId, ':', coordinates); // Debugging

        if (coordinates) {
            var coordsArray = coordinates.split(',').map(Number);

            if (coordsArray.length % 2 !== 0) {
                console.error('Invalid coordinate data.');
                alert('Invalid coordinate data for the selected zone.');
                return;
            }

            var latLngs = [];
            for (var i = 0; i < coordsArray.length; i += 2) {
                latLngs.push({ lat: coordsArray[i], lng: coordsArray[i + 1] });
            }
            DisplayGoogleMap(latLngs);
            
        } else {
            DisplayGoogleMap([]);
            console.error('No coordinates found for zone ID:', zoneId);
            alert('No coordinates available for the selected zone.');
        }
    }
   
    function DisplayGoogleMap(latLngs) {
        // Initialize map options
        var mapOptions = {
            zoom: 15,
            mapTypeId: google.maps.MapTypeId.ROADMAP
        };

        // Create the map
        var map = new google.maps.Map(document.getElementById("myDiv"), mapOptions);
        // Initialize an array for the coordinates
        var pathCoordinates = latLngs.map(coord => new google.maps.LatLng(coord.lat, coord.lng));

        // Create a Polygon
        var polygon = new google.maps.Polygon({
            paths: pathCoordinates,
            strokeColor: "#FF0000",
            strokeOpacity: 0.8,
            strokeWeight: 2,
            fillColor: "#FF0000",
            fillOpacity: 0.35
        });
        polygon.setMap(map);

        // Create a LatLngBounds object
        var bounds = new google.maps.LatLngBounds();
        pathCoordinates.forEach(coord => bounds.extend(coord));

        // Adjust the map to fit the bounds
        map.fitBounds(bounds);

        // Add markers for each coordinate
        pathCoordinates.forEach(coord => {
            new google.maps.Marker({
                position: coord,
                map: map,
                title: 'Coordinate'
            });
        });
    }


    window.onload = function () {
        fetchAndDisplayZones();
        DisplayGoogleMap([
            { lat: 33.838345, lng: 35.539841 } // Default coordinates or adjust as needed
        ]);
       
    };
    function DeleteZone(id) {
        if (confirm('Are you sure you want to delete this zone?')) {
            $.ajax({
                url: '@Url.Action("RemoveZone", "Zone")',
                type: 'POST',
                data: {zoneid : id },
                success: function (result) {
                    if (result.success) {
                        location.reload();
                    } else {
                        alert('Error deleting zone');
                    }
                },
                error: function (err) {
                    console.error(err);
                    alert('Error deleting zone');
                }
            });
        }
    }

    function EditZone(id) {
        if (confirm('Are you sure you want to edit this zone?')) {

            sessionStorage.setItem('ZoneData', id);
            console.log("zone data stored in sessionStorage:", id);
            window.location.href = '@Url.Action("EditZone", "Views")';
           
        }
      


    }
    function fetchZoneDetails(zoneId) {
        $.ajax({
            url: "https://api.parkit.nova4lb.com/admin/zones/" + zoneId,
            type: 'GET',
            headers: {
                'Authorization': 'Bearer ' + accessToken
            },
            success: function (response) {
                if (response) {
                    console.log(response);
                    populateModal(response); // Adjusted to pass the whole result object
                    $('#editEventModal').modal('show');
                } else {
                    alert('Error fetching zone details');
                }
            },
            error: function (err) {
                console.error(err);
                alert('Error fetching zone details');
            }
        });
    }

    function populateModal(zone) {
        // Set values in the modal using the response data
        $('#Zone_ID').val(zone._id);
        $('input[name="Zone_Name"]').val(zone.name);
        $('input[name="Area"]').val(zone.area.name);
        $('input[name="Street"]').val('N/A');

        $('#supervisor').val(zone.editor ? zone.editor : 'N/A');
        $('#active-checkbox').prop('checked', zone.isActive);

        $('#subzone-table tbody').empty();

        // Check if the location coordinates exist and are valid
        if (zone.location && zone.location.coordinates && zone.location.coordinates.length > 0) {
            // Wrap the coordinates in the required structure
            const latLngs = {
                location: {
                    coordinates: zone.location.coordinates // Assuming you want the first polygon
                }
            };

            // Convert the coordinates to JSON string
            const latLngsString = JSON.stringify(latLngs);

            // Pass the JSON string to the DisplayModalMap function
            DisplayModalMap(latLngsString);
        }
    }





    //Modal Map
    function DisplayModalMap(latLngsString) {
        console.log('LatLngs received for modal map:', latLngsString); // Debugging

        // Assuming latLngsString is a JSON string of your coordinates
        const coordinatesData = JSON.parse(latLngsString);

        // Extract the polygon coordinates
        const coordinates = coordinatesData.location.coordinates[0];

        // Convert the coordinates into an array of LatLng objects
        const latLngs = coordinates.map(coord => ({
            lat: coord[1], // Latitude
            lng: coord[0]  // Longitude
        }));

        console.log('Parsed latLngs:', latLngs); // Debugging

        // Ensure latLngs is an array
        if (!Array.isArray(latLngs) || latLngs.length === 0) {
            console.error('latLngs is not a valid array:', latLngs);
            alert('Invalid coordinates data for the selected zone.');
            return;
        }

        // Initialize map options
        const mapOptions = {
            zoom: 15,
            mapTypeId: google.maps.MapTypeId.ROADMAP
        };

        // Create the map
        const map = new google.maps.Map(document.getElementById("modalMap"), mapOptions);

        // Initialize an array for the coordinates
        const pathCoordinates = latLngs.map(coord => new google.maps.LatLng(coord.lat, coord.lng));

        // Create a Polygon
        const polygon = new google.maps.Polygon({
            paths: pathCoordinates,
            strokeColor: "#FF0000",
            strokeOpacity: 0.8,
            strokeWeight: 2,
            fillColor: "#FF0000",
            fillOpacity: 0.35
        });
        polygon.setMap(map);

        // Create a LatLngBounds object
        const bounds = new google.maps.LatLngBounds();
        pathCoordinates.forEach(coord => bounds.extend(coord));

        // Adjust the map to fit the bounds
        map.fitBounds(bounds);

        // Add markers for each coordinate
        pathCoordinates.forEach(coord => {
            new google.maps.Marker({
                position: coord,
                map: map,
                title: 'Coordinate'
            });
        });
    }


</script>
