using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Conventions;
using ParkIt.Models.Data;
using System.Data.Entity;
using System.Data.Entity.Validation;
using System.Globalization;

namespace ParkIt.Controllers
{
    //[Authorize]
    public class ReportController : Controller
    {
        private readonly ILogger<ReportController> _logger;
        private readonly ParkItDbContext _dbContext;


        public ReportController(ILogger<ReportController> logger, ParkItDbContext dbContext)
        {
            _logger = logger;
            _dbContext = dbContext;
        }
        public IActionResult Index()
        {
            return View();
        }


        //2. Financial Performance:

        //Total Revenue: Total income generated from valet services.
        [HttpGet]
        public async Task<ActionResult<decimal>> TotalRevenue()
        {
            try
            {
                var totalRevenue = await _dbContext.Transactions
                    .SumAsync(r => r.Fee);

                return Ok(totalRevenue);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"An error occurred: {ex.Message}");
                return StatusCode(500, new { success = false, message = "Internal server error" });
            }
        }

        //- Revenue per Location: Income generated from each parking location.
        [HttpGet]
        public async Task<ActionResult<decimal>> TotalRevenuePerLocation(int zoneid)
        {
            try
            {
                var totalRevenue = await _dbContext.Transactions
                    .Where(r => r.Zone_ID == zoneid)
                    .SumAsync(r => r.Fee);

                return Ok(totalRevenue);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"An error occurred: {ex.Message}");
                return StatusCode(500, new { success = false, message = "Internal server error" });
            }
        }
        //- Revenue per Runner: Income generated by each runner.
        [HttpGet]
        public async Task<ActionResult<decimal>> TotalRevenuePerRunner(int runnerid)
        {
            try
            {
                var totalRevenue = await _dbContext.Transactions
                    .Where(r => r.Runner_Collect_ID == runnerid || r.Runner_Dispatch_ID == runnerid)
                    .SumAsync(r => r.Fee);

                return Ok(totalRevenue);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"An error occurred: {ex.Message}");
                return StatusCode(500, new { success = false, message = "Internal server error" });
            }
        }
        //- Average Transaction Value: Average amount spent per car.
        [HttpGet]
        public async Task<ActionResult<decimal>> AverageTransactionsValue()
        {
            try
            {
                var sumFee = _dbContext.Transactions.Sum(o => o.Fee);
                var totaltransactions = _dbContext.Transactions.Count();
                var average = sumFee / totaltransactions;
                return Ok(average);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"An error occurred: {ex.Message}");
                return StatusCode(500, new { success = false, message = "Internal server error" });
            }
        }




        //3. Customer Satisfaction:

        //-Customer Ratings: Average rating given by customers.
        [HttpGet]
        public async Task<ActionResult<decimal>> AverageRating()
        {
            try
            {
                var sumrating = _dbContext.Transactions.Sum(o => o.Rating);
                var totaltransactions = _dbContext.Transactions.Count();
                var average = sumrating / totaltransactions;
                return Ok(average);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"An error occurred: {ex.Message}");
                return StatusCode(500, new { success = false, message = "Internal server error" });
            }
        }
        //- Customer Feedback Count: Number of feedback entries received.
        [HttpGet]
        public async Task<ActionResult<int>> NumberofFeedbacks()
        {
            try
            {
                var sum = await _dbContext.Transactions.CountAsync(o => !string.IsNullOrEmpty(o.Note));
                return Ok(sum);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"An error occurred: {ex.Message}");
                return StatusCode(500, new { success = false, message = "Internal server error" });
            }
        }
        //- Repeat Customer Rate: Percentage of customers who use the service multiple times.
        [HttpGet]
        public async Task<ActionResult> CustomerRepeatRate()
        {
            try
            {
                // Step 1: Get the total number of unique customers (customers who have made at least one transaction)
                var totalCustomers = await _dbContext.Transactions
                    .Select(t => t.PhoneNumber)
                    .Distinct()
                    .CountAsync();

                // Step 2: Get the number of repeat customers (those who have made more than one transaction)
                var repeatCustomers = await _dbContext.Transactions
                    .GroupBy(t => t.PhoneNumber)
                    .Where(g => g.Count() > 1)
                    .CountAsync();

                // Step 3: Calculate the repeat customer rate
                double repeatCustomerRate = (double)repeatCustomers / totalCustomers * 100;

                // Return the repeat customer rate rounded to 2 decimal places
                return Ok(new
                {
                    repeatCustomerRate = Math.Round(repeatCustomerRate, 2),
                    totalCustomers,
                    repeatCustomers
                });
            }
            catch (Exception ex)
            {
                Console.WriteLine($"An error occurred: {ex.Message}");
                return StatusCode(500, new { success = false, message = "Internal server error" });
            }
        }



        //4. Staff Performance:

        //- Runner Efficiency: Number of cars handled per runner.
        [HttpGet]
        public async Task<ActionResult<int>> CarsPerRunner(int Runnerid)
        {
            try
            {
                var total = await _dbContext.Transactions.CountAsync(r => r.Runner_Collect_ID == Runnerid || r.Runner_Dispatch_ID == Runnerid);
                return Ok(total);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"An error occurred: {ex.Message}");
                return StatusCode(500, new { success = false, message = "Internal server error" });
            }
        }



        //1. Daily Operations Report:

        // - Summary of cars parked and retrieved.

        [HttpGet]
        public async Task<ActionResult<int>> DailyCarsParkedAndDispatched()
        {
            try
            {
                // Get the current date
                var today = DateTime.Today;

                // Count transactions where ArrivalTime is today
                var total = await _dbContext.Transactions
                    .CountAsync(t => t.ArrivalTime == today);

                return Ok(total);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"An error occurred: {ex.Message}");
                return StatusCode(500, new { success = false, message = "Internal server error" });
            }
        }
        //- Revenue generated per day.
        [HttpGet]
        public async Task<ActionResult<int>> DailyRevenue()
        {
            try
            {
                // Get the current date
                var today = DateTime.Today;

                var transactions = await _dbContext.Transactions
                    .Where(t => t.ArrivalTime == today)
                    .ToListAsync();

                var total = transactions.Sum(o => o.Fee);


                return Ok(total);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"An error occurred: {ex.Message}");
                return StatusCode(500, new { success = false, message = "Internal server error" });
            }
        }

        //- Runner utilization rates.
        [HttpGet]
        public async Task<ActionResult<double>> RunnerUtilizationRate(int Runnerid)
        {
            try
            {
                var totalTransactions = await _dbContext.Transactions.CountAsync();
                var runnerTransactions = await _dbContext.Transactions.CountAsync(r => r.Runner_Collect_ID == Runnerid || r.Runner_Dispatch_ID == Runnerid);

                double utilizationRate = (double)runnerTransactions / totalTransactions * 100;
                return Ok(utilizationRate);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"An error occurred: {ex.Message}");
                return StatusCode(500, new { success = false, message = "Internal server error" });
            }
        }


        //2. Weekly/Monthly Revenue Report:

        //- Total revenue for the week/month.
        [HttpGet]
        public async Task<ActionResult<decimal>> WeeklyRevenue()
        {
            try
            {
                var query = "SELECT SUM(FEE) FROM Transactions WHERE DATEPART(week, ArrivalTime) = DATEPART(week, GETDATE()) AND YEAR(ArrivalTime) = YEAR(GETDATE())";

                // Create a command
                using (var command = _dbContext.Database.GetDbConnection().CreateCommand())
                {
                    command.CommandText = query;
                    command.CommandType = System.Data.CommandType.Text;

                    // Open the connection if it's not already open
                    if (command.Connection.State != System.Data.ConnectionState.Open)
                    {
                        await command.Connection.OpenAsync();
                    }

                    // Execute the query and get the result
                    var result = await command.ExecuteScalarAsync();

                    return Ok(result);
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"An error occurred: {ex.Message}");
                return StatusCode(500, new { success = false, message = "Internal server error" });
            }
        }

        [HttpGet]
        public async Task<ActionResult<decimal>> MonthlyRevenue(int monthNumber, int yearNumber)
        {
            try
            {
                var query = "SELECT SUM(Fee) FROM Transactions WHERE MONTH(ArrivalTime) = " + monthNumber + " AND YEAR(ArrivalTime) = " + yearNumber;

                // Create a command
                using (var command = _dbContext.Database.GetDbConnection().CreateCommand())
                {
                    command.CommandText = query;
                    command.CommandType = System.Data.CommandType.Text;

                    // Open the connection if it's not already open
                    if (command.Connection.State != System.Data.ConnectionState.Open)
                    {
                        await command.Connection.OpenAsync();
                    }

                    // Execute the query and get the result
                    var result = await command.ExecuteScalarAsync();

                    return Ok(result);

                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"An error occurred: {ex.Message}");
                return StatusCode(500, new { success = false, message = "Internal server error" });
            }
        }
        //- Revenue breakdown by location.
        [HttpGet]
        public async Task<IActionResult> RevenueByLocation(int ZoneId)
        {
            try
            {
                var totalRevenue = _dbContext.Transactions
                    .Where(r => r.Zone_ID == ZoneId)
                    .Sum(r => r.Fee);
                return Ok(totalRevenue);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"An error occurred: {ex.Message}");
                return StatusCode(500, new { success = false, message = "Internal server error" });
            }
        }

        //- Revenue breakdown by runner.
        [HttpGet]
        public async Task<IActionResult> RevenueByRunner(int Runnerid)
        {
            try
            {
                var totalRevenue = _dbContext.Transactions
                    .Where(r => r.Runner_Collect_ID == Runnerid || r.Runner_Dispatch_ID == Runnerid)
                    .Sum(r => r.Fee);
                return Ok(totalRevenue);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"An error occurred: {ex.Message}");
                return StatusCode(500, new { success = false, message = "Internal server error" });
            }
        }

    }
}
